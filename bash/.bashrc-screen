# .bashrc-screen

# screen-related options

# check to see that screen is running
# ...or if we're running through su(1)
# ...and we're not running through SSH
#if [[ -n "$STY" -o "x$0" == 'x-su' -o -z "$SSH_CLIENT$SSH_CONNECTION$SSH_TTY" ]]; then
if [[ -n "$STY" ]]; then
	# prompt

	# method 1: using PROMPT_COMMAND, which executes after each bash
	# command
	#PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }echo -ne '$RESET_TITLE'"

	# method 2: using the prompt string
	# (more redundant, but keeps command completion from sticking)
	PS1='\[\ek\e\\\]'"$PS1"

	# `exec' calls reset title
	_exec() {
		echo -n $'\ek'"$1"$'\e\\'
		builtin exec "$@"
	}
	alias exec='_exec'

	_fg() {
		# this is sloppy but works
		#echo -ne "\\ek$(eval echo -n "$(builtin jobs "${1:-%+}" 2>/dev/null)" |cut -f 3 -d ' ')\\e\\"
		# this is a little better
		#echo -ne "\\ek$(eval echo -n "$(jobs "${1:-%+}" 2>/dev/null |cut -d ' ' -f 20)")\\e\\"
		# this doesn't work as well, but is way more secure
		echo -n $'\ek'"$(basename -- "$(builtin jobs "${1:-%+}" 2>/dev/null |cut -d ' ' -f 20)")"$'\e\\'
		builtin fg "$@"
	}
	alias fg='_fg'
fi

# (addendum: this causes a LOT of problems when ssh-ing from within a screen
# session)
#elif [[ -n "$SSH_CLIENT$SSH_CONNECTION$SSH_TTY" ]]; then
#	# we're logged in through ssh
#	if [[ -z "$DISPLAY" ]]; then
#		# start screen if we're not using X forwarding
#		exec screen -xRR
#	fi
#fi
