# .bashrc-linux
# universal defs

## bash builtin variables
HISTTIMEFORMAT='%s'		# the beloved Second of Our Linux
HISTFILESIZE=65535
HISTSIZE=65535
HISTIGNORE="${HISTIGNORE:+$HISTIGNORE:}la:ll:lah:lat:;a:-:fg:bg:j:rma:fol"
HISTCONTROL='ignoreboth'	# ignore duplicates and /^\s/
# save history after every command
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }history -a"
[[ -e ~/.hosts ]] && HOSTFILE="$HOME/.hosts"	# for @-completion

## small bash annoyances
shopt -s \
	no_empty_cmd_completion \
	cdspell \
	checkhash \
	checkwinsize \
	histappend \
	histreedit \
	extglob \
	globstar \
	histverify

shopt -u \
	sourcepath

# use C-s to search forward through history (do not block output)
stty stop ''

## edit this file
alias rc='$EDITOR ~/.bashrc-linux'

## make
# utilize all cores
alias \
    make='make -j$(nproc)'

## ls
alias \
	la='ls -la' \
	lah='la -h' \
	ll='ls -l' \
	lat='la -t' \
	las='la -S'

# handy function to list all files and dirs in a single ls(1)
# usefulness: ***
lsr() {
	find "${@:-.}" -print0 |
	# XXX : must sort or large file lists will be out of order if split up
	#	to different ls invocations by xargs
	sort -z |
	xargs -0 \
		ls $LS_OPTIONS -dla
}

# same thing as above but filters out .svn, .git, .hg, .bzr
# usefulness: ****
lsrr() {
	find "${@:-.}" \
		! \( \
			-regextype posix-egrep \
			-regex '.*/(\.(svn|git|hg|bzr)|CVS)(/.*)?' \
		\) \
		-print0 |
	# XXX : must sort or large file lists will be out of order if split up
	#	to different ls invocations by xargs
	sort -z |
	xargs -0 \
		ls $LS_OPTIONS -dla
}

# same thing, but pipe it through less(1) with coloring
# usefulness: **
lsrl() {
	find "${@:-.}" -print0 |
	# XXX : must sort or large file lists will be out of order if split up
	#	to different ls invocations by xargs
	sort -z |
	xargs -0 \
		ls $LS_OPTIONS -dla --color=always |
	less -R
}

## grep
alias grep='grep --color=auto'

## chmod
# usefulness: ****
alias \
	privatize='find . \( -type f -exec chmod 0600 -- {} \; \) -o \( -type d -exec chmod 0700 -- {} \; \)' \
	publicize='find . \( -type f -exec chmod 0644 -- {} \; \) -o \( -type d -exec chmod 0755 -- {} \; \)' \
	ppublicize='find . \( -type f ! -perm /0111 -exec chmod 0644 -- {} \; \) -o \( \( -type d -o \( -type f -perm /0111 \) \) -exec chmod 0755 -- {} \; \)' \
	pprivatize='find . \( -type f ! -perm /0111 -exec chmod 0600 -- {} \; \) -o \( \( -type d -o \( -type f -perm /0111 \) \) -exec chmod 0700 -- {} \; \)'

## find
# usefulness: *****
alias \
	findi='find . -iname' \
	find1='find . -maxdepth 1 -mindepth 1' \
	find1i='find1 -iname' \
	findf='find . -type f' \
	findfi='findf -iname' \
	findf1='find1 -type f' \
	findf1i='findf1 -iname' \
	findd='find . -type d' \
	finddi='findd -iname' \
	findd1='find1 -type d' \
	findd1i='findd1 -iname'

# if piping output somewhere (like grep) write header to stderr and the rest of
# the lines to stdout
# this makes the header show up in grepped results
# usefulness: TODO
_header_shunt() {
	if [[ ! -t 1 ]]; then
		"$@" |sed -e '1w /dev/stderr' -e '1d'
	else
		"$@"
	fi
}

alias \
	lsof='_header_shunt lsof'

## suppress output and background select GUI programs
_noout_bg() {
	"$@" &>/dev/null &
}

hash meld 2>/dev/null && alias meld='_noout_bg meld'
hash geeqie 2>/dev/null && alias geeqie='_noout_bg geeqie'

## ps

alias \
	ps='_header_shunt ps' \
	psa='ps -A x -f f' \
	psac='ps -A xwf -eo pid,user,cgroup,bsdtime,args' \
	psx='ps x f -o user,pid,ppid,c,stime,tty,stat,nice,bsdtime,cmd' \
	psg='ps -A x -f |grep'

# highlight missing so's from ldd in bold red
# usefulness: TODO
_ldd() {
	if [[ -t 1 ]]; then
		ldd "$@" |sed -e 's/^.*=> not found$/\x1b[01;31m&\x1b[0m/'
	else
		ldd "$@"
	fi
}

alias ldd='_ldd'

## other programs
# xo = from work, helps greatly
alias \
	startx='exec startx' \
	g='gvim' \
	xo='xdg-open'

hash xclip 2>/dev/null && alias xclip='xclip -selection clipboard'

## directories
# NOTE: `autocd' shell option may be a better option than the ..* aliases
alias \
	..='cd .. && pwd && ls -A' \
	...='cd ../.. && pwd && ls -A' \
	....='cd ../../.. && pwd && ls -A' \
	.....='cd ../../../.. && pwd && ls -A' \
	......='cd ../../../../.. && pwd && ls -A' \
	.......='cd ../../../../../.. && pwd && ls -A' \
	........='cd ../../../../../../.. && pwd && ls -A' \
	-='cd - && ls -A' \
	++='pushd' \
	--='popd || popd -0'

## data sinks and dump files
n='/dev/null'
z='/dev/zero'
g="$HOME/.garbage.out"

## misc bash shortcuts
alias \
	k='kill -9' \
	ka='killall -v' \
	stopall='ka -s STOP' \
	startall='ka -s CONT' \
	stf='strace -etrace=file' \
	stfg='stf -o$g' \
	j='jobs' \
	rmr='rm -rf' \
	rmdirempty='findd -empty -print -delete' \
	rmdirempty1='findd1 -empty -print -delete' \
	brokensymlinks='find -L . -type l'

# the "I forgot to use `CMD && ALSO`" aliases.
# E.g.:
# $ rsync ... <Enter>
# [as it's excuting]
# and rm -rf ...
# usefulness: TODO
alias \
	and='[[ $? -eq 0 ]] &&' \
	or='[[ $? -eq 0 ]] ||'

# create and switch to a new directory
# usefulness: ****
nd() {
	[[ -n "$1" && "$1" != '-' ]] && mkdir --parents -- "$1" && cd "$1"
}

# "follow" last argument
# usefulness: ***
fol() {
	local \
		lastarg="$_" \
		cd_op='cd'

	if [[ $lastarg = - ]]; then
		lastarg="$OLDPWD"
	fi

	while getopts 'pr' flag; do
		case "$flag" in
			'p')
				cd_op='pushd'
				;;
			'r')
				lastarg="$(realpath -- "$lastarg")"
				;;
		esac
	done

	test -d "$lastarg" && $cd_op "$lastarg" || $cd_op "$(dirname -- "$lastarg")"
}

# clone and switch to a new directory
# usefulness: ***
gcd() {
	git clone "$@"
	# XXX Must be "local" and immediately after "git" call otherwise won't be
	# able to capture $? and $_ in the same line
	local url="$1" targetdir="$_" err=$?
	if [[ $err -ne 0 ]]; then
		local gitprefix='git@github.com:' yn
		read -p "Failed to clone. Try $gitprefix$url? [yN] " yn
		if [[ ! $yn =~ ^[Yy] ]]; then
			return $err
		fi
		gcd "$gitprefix$url"
		return $?
	fi

	if [[ -d "$targetdir" ]]; then
		cd "$targetdir"
		return
	fi

	targetdir="$(basename "$targetdir" .git)"
	cd "$targetdir"
}

# quickly switch to a git root directory
# usefulness: TODO
gr() {
    local dir=$(git rev-parse --show-toplevel)
    if [[ -z $dir ]]; then
        echo 'Failed to find directory' >&2
        return 2
    fi
    cd "$dir"
}

# untar and cd to the tarball's directory
# usefulness: *****
# example:
# ~ $ tcd foo-1.2.3.tar.xz
# ~/foo-1.2.3 $ _
tcd() {
	local tarball
	if [[ $1 =~ (https?|ftp):// ]]; then
		tarball="$(basename -- "$1")"
		[[ -f "$tarball" ]] || wget -O "$tarball" "$1"
	else
		tarball="$1"
	fi

	tar xf "$tarball" &&
	cd "$(tar tf "$tarball" |head -1 |cut -f 1 -d /)"
}

# delete a huge directory in the background so you can do more interesting
# things with the terminal
# usefulness: *****
# options:
#  -s : shred(1) files before unlinking them. WARNING: if another instance of
#	  this function is already running it may simply unlink the files
#
qrmr() {
	# disconnect and destruct
	local dir fn shr=0
	# -s => shred instead of just rm
	if [[ "_$1" == '_-s' ]]; then
		shr=1
		shift 1
	fi

	for dir in ZZZ YYY; do
		# truth table
		# $dir is dir?	| exists $dir/.ok?	|| action
		# 0		| x			|| 1
		# 1		| 0			|| 0
		# 1		| 1			|| 2
		# --
		# r=1 : normal; create $dir, move $thing into $dir, start destruct of $dir
		# r=0 : abort (move on)
		# r=2 : just move $thing into $dir because $dir is already being destroyed
		if [[ ! -d "$dir" ]]; then
			mkdir -p -- "$dir" &&
			touch "$dir"/.okaytodelete || return
			for fn; do
				mv -- "$fn" "$(mktemp -dp "$dir" 'qrmr.XXXXXX')"
			done
			if [[ "$shr" -eq 0 ]]; then
				rm -rf -- "$dir"/* "$dir" &
			else
				ionice -c 3 find "$dir"/* -type f -exec shred -zu -- {} + &&
				find "$dir"/* -type d -empty -delete &&
				rm -rf -- "$dir" &
			fi
			return 0
		elif [[ -e "$dir"/.okaytodelete ]]; then
			for fn; do
				mv -- "$fn" "$(mktemp -dp "$dir" 'qrmr.XXXXXX')"
			done
			return
		fi
		echo "\`$dir' exists."
	done
	return 1
}

# turn off history (incognito mode)
# usefulness: ?
histoff() {
	unset HISTFILE
	# decolorize prompt, but set to bright white for clear indication that
	# history is off
	#PS1='\[\e[01;37m\]'"$(sed -e 's,\\\[\\e\[[^]]*\\\],,g' <<<"$PS1")"'\[\e[0m\]'
	# same decolorization, using __git_ps1
	PROMPT_COMMAND='printf '\''\e[01;37m'\'"; $(sed -e 's,\(\\\e\[[0-9;]*m\),,g;s,\\\[\\\],,g' <<<"$PROMPT_COMMAND")"
}

# colorized manpages
alias man='LESS_TERMCAP_mb=$'\''\e[05m'\'' \
	LESS_TERMCAP_md=$'\''\e[01;38;5;38m'\'' \
	LESS_TERMCAP_me=$'\''\e[0m'\'' \
	LESS_TERMCAP_so=$'\''\e[07;38;5;154m'\'' \
	LESS_TERMCAP_se=$'\''\e[0m'\'' \
	LESS_TERMCAP_us=$'\''\e[04;01;38;5;165m'\'' \
	LESS_TERMCAP_ue=$'\''\e[0m'\'' \
	man'
