#!/usr/bin/perl
# vi: et sts=4 sw=4 ts=4
package main;
use strict;
use warnings;

# Sorts status output putting more important stuff toward the bottom,
# lessening the need to scroll up.

my %matchers = (
    aa_conflict => qr/interactive rebase in progress; onto/,
    a_untracked => qr/^Untracked files:/,
    b_unstaged => qr/^(?:Changes not staged for commit:|no changes added to commit|nothing to commit, working tree clean|nothing added to commit)/,
    c_staged => qr/^Changes to be committed:/,
    d_branch => qr/^(?:On branch|HEAD detached) /,
    e_conflict => qr/^Unmerged paths:/,
);

MAIN: {
    my $contents;
    {local $/; $contents = <>} # slurp!
    my @sections = split /\n\n+/, $contents;

    print join "\n\n", sort map {
        chomp;
        Git::SortedStatusSection->new(\%matchers, $_);
    } @sections;
    print "\n";
}

package Git::SortedStatusSection;
use strict;
use warnings;
use overload
    '""' => 'as_string',
    'cmp' => 'op_cmp';

sub new {
    my ($class, $matchers, @text) = @_;
    bless {
        text => \@text,
        matchers => $matchers,
    }, $class;
}

sub _type {
    my $self = shift;
    my ($first) = split "\n", $self->{text}->[0];

    # XXX Reset internal hash pointer so 'each' works from the top instead
    # of picking up where it left off
    keys %matchers;
    while (my ($type, $regex) = each %{$self->{matchers}}) {
        if ($first =~ $regex) {
            return $type;
        }
    }
    warn "Unrecognized status section: $first\n";
    return '';
}

sub type {
    my $self = shift;
    $self->{type} = $self->_type unless defined $self->{type};
    return $self->{type};
}

sub as_string {
    my $self = shift;
    join '', @{$self->{text}}
}

sub op_cmp {
    my ($self, $other) = @_;
    # Keyed to specific language settings (sorry)
    if ($ENV{LANG} !~ /^(?:en_US|C)\b/) {
        return 0;
    }
    $self->type cmp $other->type;
}

=head1 AUTHOR

Dan Church S<E<lt>h3xx@gmx.comE<gt>>

=head1 COPYRIGHT

Copyright (C) 2021 Dan Church.

License GPLv3: GNU GPL version 3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
with Commons Clause 1.0 (https://commonsclause.com/).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
You may NOT use this software for commercial purposes.

=cut

1;
