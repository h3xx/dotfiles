#!/bin/bash
# vi: et sts=4 sw=4 ts=4

# This script acts as a wrapper for:
# - "git diff," which doesn't support `-` or `--upstream`
# - "git reset," which also doesn't support `-` or `--upstream` and gives a
#   confusing and unhelpful error message: "fatal: option '-' must come before
#   non-option arguments"
#
# Use the wrapper scripts in this directory (git-*-wrapper) via aliases:
# d = diff-wrapper
# r = reset-wrapper
#
# Or, you can utilize this script directly via aliases:
# d = ref-expand-wrapper diff
# r = ref-expand-wrapper reset

upstream_ref() {
    # TODO replace with `git branch --show-current` when it's more
    # widely-supported
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [[ -z $CURRENT_BRANCH ]]; then
        printf 'fatal: could not determine upstream of HEAD when it does not point to any branch.\n' \
            >&2
        exit 128
    fi

    REMOTE=$(git config "branch.$CURRENT_BRANCH.remote")
    REF=$(git config "branch.$CURRENT_BRANCH.merge")
    if [[ -z $REMOTE || -z $REF ]]; then
        printf 'fatal: could not determine upstream of %s when it does not have an upstream set.\n' \
            "$CURRENT_BRANCH" \
            >&2
        exit 128
    fi

    # With...
    # - REF=refs/heads/master
    # - REMOTE=origin
    # ...eliminate 'refs/heads' to make it 'refs/remotes/origin/master'
    printf 'refs/remotes/%s/%s' "$REMOTE" "${REF:11}"
}

WRAPPED_COMMAND=$1
shift 1
if [[ -z $WRAPPED_COMMAND ]]; then
    printf 'Usage: %s <COMMAND> [ARGS]...\n' \
        "${0##*/}" \
        >&2
    exit 3
fi

GIT_ARGS=()

for ARG; do
    case "$ARG" in
        -)
            GIT_ARGS+=('@{-1}')
            ;;
        --up|--upstream)
            GIT_ARGS+=("$(upstream_ref)")
            ;;
        *)
            GIT_ARGS+=("$ARG")
            ;;
    esac
done
exec git "$WRAPPED_COMMAND" "${GIT_ARGS[@]}"
