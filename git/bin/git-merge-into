#!/bin/bash
# vi: et sts=4 sw=4 ts=4

set -e

USAGE() {
    printf 'Usage: %s [OPTIONS] [--] BRANCH-LIKE\n' \
        "${0##*/}"
    printf '       %s --default-branch=BRANCH-LIKE\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Merge THIS branch into a DIFFERENT branch.

  -h,--help                     Show this help message.
  --default-branch=BRANCH-LIKE  Set the default branch if none is specified.
  --pull,--no-pull              Enable/disabling running 'git pull' after
                                  switching to BRANCH-LIKE (default enabled).
  --                            Terminate options list.

Copyright (C) 2022 Dan Church.
License GPLv3: GNU GPL version 3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
with Commons Clause 1.0 (https://commonsclause.com/).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
You may NOT use this software for commercial purposes.
EOF
}

DEFAULT_BRANCH=
PULL_FIRST=1

PASS_ARGS=()
NO_MORE_FLAGS=0
for ARG; do
    # Assume arguments that don't begin with a - are supposed to be files or
    # other operands
    if [[ $NO_MORE_FLAGS -eq 0 && $ARG = -* ]]; then
        case "$ARG" in
            --default-branch=*)
                DEFAULT_BRANCH=${ARG#*=}
                ;;
            --no-pull)
                PULL_FIRST=0
                ;;
            --pull)
                PULL_FIRST=1
                ;;
            --help|-h)
                HELP_MESSAGE
                exit 0
                ;;
            --)
                NO_MORE_FLAGS=1
                ;;
            *)
                printf 'Unrecognized flag: %s\n' \
                    "$ARG" \
                    >&2
                USAGE >&2
                exit 2
                ;;
        esac
    else
        PASS_ARGS+=("$ARG")
    fi
done

main() {
    if [[ $# -ne 1 && -z $DEFAULT_BRANCH ]]; then
        printf 'Missing: BRANCH-LIKE\n' >&2
        USAGE >&2
        exit 2
    fi

    BRANCH=${1:-$DEFAULT_BRANCH}

    git checkout "$BRANCH"
    if [[ $PULL_FIRST -ne 0 ]] && is_on_branch; then
        git pull
    fi
    git merge -
}

is_on_branch() {
    local CURRENT_BRANCH
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    [[ $CURRENT_BRANCH != 'HEAD' ]]
}

main "${PASS_ARGS[@]}"
