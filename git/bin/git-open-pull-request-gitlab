#!/bin/bash
# vi: et sts=4 sw=4 ts=4

shopt -s inherit_errexit
set -e

USAGE() {
    printf 'Usage: %s [OPTIONS]\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Open a web browser to create a new Gitlab pull request.

  -h            Show this help message.
  -A REF_RANGE  Like -D, but copy description from commit messages in
                  REF_RANGE.
  -D TEXT       Set merge request description.
  -L REF        Like -A, but use only one REF.
  -s BRANCH     Set source branch (defaults to current branch).
  -T TEXT       Set merge request title (not working).
  -t BRANCH     Set target branch (defaults to main).
                  You can set this by running "git config
                  gitlab.defaultTargetBranch <BRANCH>"

Copyright (C) 2015-2022 Dan Church.
License GPLv3: GNU GPL version 3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
with Commons Clause 1.0 (https://commonsclause.com/).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
You may NOT use this software for commercial purposes.
EOF
}

ARG_MR_DESC=
ARG_MR_TITLE=
ARG_SOURCE_BRANCH=
ARG_TARGET_BRANCH=
MR_DESC_FROM_REF=

while getopts 'A:D:L:s:T:t:h' FLAG; do
    case "$FLAG" in
        'A')
            MR_DESC_FROM_REF=$OPTARG
            ;;
        'D')
            ARG_MR_DESC=$OPTARG
            MR_DESC_FROM_REF=
            ;;
        'L')
            MR_DESC_FROM_REF="${OPTARG}~1..${OPTARG}"
            ;;
        's')
            ARG_SOURCE_BRANCH=$OPTARG
            ;;
        'T')
            ARG_MR_TITLE=$OPTARG
            ;;
        't')
            ARG_TARGET_BRANCH=$OPTARG
            ;;
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

_git_cfg() (
    # Prevent "git config" from exiting when the config value returned is empty
    git config "$@" || :
)

main() {
    SOURCE_BRANCH=$(source_branch)
    TARGET_BRANCH=$(target_branch)
    MR_DESC=$(mr_desc)
    # TODO Gitlab doesn't use this
    MR_TITLE=$(mr_title)

    # construct URL
    PUSH_URL=$(push_url)
    if [[ -z $PUSH_URL ]]; then
        printf 'Unable to determine push URL (are you in a git directory?)\n'
        exit 2
    fi
    PULL_REQUEST_URL=$(pull_request_url)

    open_browser "$PULL_REQUEST_URL"
}

mr_desc() (
    if [[ -n $ARG_MR_DESC ]]; then
        printf '%s\n' "$ARG_MR_DESC"
        return
    fi
    if [[ -n $MR_DESC_FROM_REF ]]; then
        # %b: only commit message (no title [%s])
        git log --pretty=format:'%b' --no-notes "$MR_DESC_FROM_REF"
    fi
)

mr_title() (
    if [[ -n $ARG_MR_TITLE ]]; then
        printf '%s\n' "$ARG_MR_TITLE"
        return
    fi
    if [[ -n $MR_DESC_FROM_REF ]]; then
        # %s: only commit title (no body [%b])
        git log --pretty=format:'%s' --no-notes "$MR_DESC_FROM_REF"
    fi
)

open_browser() {
    local URL=$1
    git web--browse "$URL"
}

pull_request_url() (
    HTTP_ARGS=(
        "merge_request[source_branch]=$(url_encode "$SOURCE_BRANCH")"
    )
    if [[ -n $TARGET_BRANCH ]]; then
        HTTP_ARGS+=(
            "merge_request[target_branch]=$(url_encode "$TARGET_BRANCH")"
        )
    fi

    if [[ -n $MR_TITLE ]]; then
        HTTP_ARGS+=("merge_request[title]=$(url_encode "$MR_TITLE")")
    fi

    if [[ -n $MR_DESC ]]; then
        HTTP_ARGS+=("merge_request[description]=$(url_encode "$MR_DESC")")
    fi

    # Concatenate all args, URL encoding '&' to %26
    HTTP_PARAMS=$(IFS='&'; echo "${HTTP_ARGS[*]//&/%26}")

    HTTP_URL=$(echo "$PUSH_URL" |perl -p -e '
        s#^ssh://##;
        s#:\d+/#/#;
        if (m#^\w*@#) {
            s#:#/#g;
            s#^\w*@#https://#;
        }
        s#\.git$##;
    ')
    printf '%s/merge_requests/new?%s' \
        "$HTTP_URL" \
        "$HTTP_PARAMS"
)

push_url() (
    git remote get-url \
        --push \
        "$(_git_cfg "branch.$SOURCE_BRANCH.remote")"
)

source_branch() (
    if [[ -n $ARG_SOURCE_BRANCH ]]; then
        printf '%s\n' "$ARG_SOURCE_BRANCH"
        return
    fi
    HEAD_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [[ -n $HEAD_BRANCH ]]; then
        printf '%s\n' "$HEAD_BRANCH"
        return
    fi
    printf 'Unable to determine current branch (are you in a git directory?)\n' \
        >&2
    return 2
)

target_branch() (
    # User specified --> must use this one
    if [[ -n $ARG_TARGET_BRANCH ]]; then
        printf '%s\n' "$ARG_TARGET_BRANCH"
        return
    fi
    CONFIG_BRANCH=$(_git_cfg gitlab.defaultTargetBranch)
    if [[ -n $CONFIG_BRANCH ]]; then
        printf '%s\n' "$CONFIG_BRANCH"
        return
    fi

    AUTO_BRANCHES=(
        "$(_git_cfg init.defaultBranch)"
        main
        master
    )

    for BRANCH in "${AUTO_BRANCHES[@]}"; do
        if [[ -n $BRANCH ]]; then
            REMOTE=$(_git_cfg "branch.$BRANCH.remote")
            if [[ -n $REMOTE ]]; then
                printf '%s\n' "$BRANCH"
                return
            fi
        fi
    done

    return 1
)

url_encode() {
    perl -MURI::Escape -e 'print &uri_escape($_), "\n" foreach @ARGV' "$@"
}

main "$@"
