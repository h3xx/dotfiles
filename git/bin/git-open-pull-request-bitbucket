#!/bin/bash
# vi: et sts=4 sw=4 ts=4

shopt -s inherit_errexit
set -e

USAGE() {
    printf 'Usage: %s [OPTIONS]\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Open a web browser to create a new BitBucket pull request.

  -h            Show this help message.
  -s BRANCH     Set source branch (defaults to current branch).

Copyright (C) 2015-2022 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
}

ARG_SOURCE_BRANCH=

while getopts 'hs:' FLAG; do
    case "$FLAG" in
        's')
            ARG_SOURCE_BRANCH=$OPTARG
            ;;
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

_git_cfg() (
    # Prevent "git config" from exiting when the config value returned is empty
    git config "$@" || :
)

main() {
    SOURCE_BRANCH=$(source_branch)

    # construct URL
    PUSH_URL=$(push_url)
    if [[ -z $PUSH_URL ]]; then
        printf 'Unable to determine push URL (are you in a git directory?)\n'
        exit 2
    fi
    PULL_REQUEST_URL=$(pull_request_url)

    open_browser "$PULL_REQUEST_URL"
}

open_browser() {
    local URL=$1
    git web--browse "$URL"
}

pull_request_url() (
    HTTP_ARGS=(
        "source=$(url_encode "$SOURCE_BRANCH")"
    )

    # Concatenate all args, URL encoding '&' to %26
    HTTP_PARAMS=$(IFS='&'; echo "${HTTP_ARGS[*]//&/%26}")

    HTTP_URL=$(echo "$PUSH_URL" |perl -p -e '
        s#^ssh://##;
        s#:\d+/#/#;
        if (m#^\w*@#) {
            s#:#/#g;
            s#^\w*@#https://#;
        }
        s#\.git$##;
    ')
    printf '%s/pull-requests/new?%s' \
        "$HTTP_URL" \
        "$HTTP_PARAMS"
)

push_url() (
    git remote get-url \
        --push \
        "$(_git_cfg "branch.$SOURCE_BRANCH.remote")"
)

source_branch() (
    if [[ -n $ARG_SOURCE_BRANCH ]]; then
        printf '%s\n' "$ARG_SOURCE_BRANCH"
        return
    fi
    HEAD_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [[ -n $HEAD_BRANCH ]]; then
        printf '%s\n' "$HEAD_BRANCH"
        return
    fi
    printf 'Unable to determine current branch (are you in a git directory?)\n' \
        >&2
    return 2
)

url_encode() {
    perl -MURI::Escape -e 'print &uri_escape($_), "\n" foreach @ARGV' "$@"
}

main "$@"
