[alias]
	# shortcuts
	h		= help
	s		= status
	d		= diff
	c		= commit
	ca		= commit --amend
	f		= fetch
	m		= merge
	ma		= merge --abort
	p		= push
	u		= push -u
	b		= branch
	r		= reset
	rh		= reset --hard
	rs		= reset --soft
	rb		= rebase
	rbc		= rebase --continue
	rba		= rebase --abort
	mt		= mergetool
	cp		= cherry-pick
	co		= checkout
	cob		= checkout -b
	pu		= pull
	sf		= submodule foreach
	sub		= submodule
	subup		= submodule update --init
	subinit		= submodule init
	subbranch	= submodule foreach git checkout
	subbr		= submodule foreach git checkout
	submaster	= submodule foreach git checkout master
	subpull		= !~/.config/git/bin/git-subpull.sh
	w		= whatchanged
	url		= remote -v	# list checkout urls
	logg		= log --graph --pretty=format:'%C(bold 232 154)%h%C(reset) %C(bold 165 235)%cd%C(reset) %C(bold 39 235)%an%C(reset)%C(bold 121 235)%d%C(reset) %s' --date=short
	show-unmerged	= show-branch --topo-order --topics --sha1-name
	# backward compatibility
	br		= !read -p \"use git b! [OK]\" && git branch
	st		= !read -p \"use git s! [OK]\" && git status

	# tattle = tell our remote about branch (or delete it with :branch)
	# usefulness: TODO
	tattle		= push --set-upstream origin
	# use this to blow away all untracked files and unstaged changes
	nuke		= !git clean -x -d -f && git co --force

[commit]
	# automatically gpg-sign all commits
	# (aliasing commit=commit -S does not work)
	gpgSign		= yes

[core]
	pager		= less -R	# handle colors correctly
	excludesfile	= ~/.gitignore_global

[merge]
	tool = vimdiff

[fetch]
	# auto-fetch submodules upon git pull only if the superproject has a
	# commit that updates the submodule pointer
	recurseSubmodules = on-demand

[color]
	branch		= auto
	diff		= auto
	interactive	= auto
	ui		= auto
	pager		= true

[include]
	path = ./git-colors-neonwolf-256.gitconfig

[user]
	name = Dan Church
	email = amphetamachine@gmail.com
	signingKey = CD2CDBD0

[github]
	user = h3xx

# enables shortcuts like `git clone gh:h3xx/dotfiles.git`
[url "git@github.com:"]
	insteadOf	= gh:

[push]
	default = simple

# automatically prune remotely-deleted branches
[fetch]
	prune = true

# only do deliberate and explicit merges, never automatic (pull) or silent (ff merge)
[pull]
	# note: if rejected, either use pull -r OR rebase origin/$branch and retry
	ff = only

[merge]
	ff = false

[log]
	decorate = true

# vi: ft=gitconfig
