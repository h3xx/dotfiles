#!/bin/bash
# vi: et sts=4 sw=4 ts=4

# intelligently installs a crontab based on the contents of run-parts' targets

RANDOM_TIMES=1

DEBUG=1
INTERACTIVE=1
RUN_PARTS='/usr/bin/run-parts'
CRON_LOG='~/.log/cron.log' # (sic)
DIR_BASE="$HOME/.cron"
DIR_BASE2='~/.cron'

has_exec() {
    local dir=$DIR_BASE/$1
    if [[ $DEBUG -gt 1 || (
        -d $dir
        && -n $(find "$dir" ! -type d -perm /0111)
        )
    ]]; then
        return 0
    fi
    return 1
}

# chooses a random number between 0 and n, inclusive
rand_num() {
    echo "$((RANDOM%($1+1)))"
}

ask_yn() (
    PROMPT=$1
    DEFAULT=$2
    read -p "$PROMPT [$([[ $DEFAULT = 'y' ]] && echo 'Y/n' || echo 'y/N')]? " ANSWER
    [[ $ANSWER =~ [01NYny] ]] || ANSWER=$DEFAULT
    # return
    [[ $ANSWER =~ [1Yy] ]]
)

# set up temporary files
CRONTAB_TEMP=$(mktemp -t "$(basename -- "$0").XXXXXX")
TEMP_FILES=("$CRONTAB_TEMP")
cleanup() {
    rm -f -- "${TEMP_FILES[@]}"
}
trap 'cleanup' EXIT

# set up crontab

if has_exec 'cron.01m'; then
    cat <<EOF >>"$CRONTAB_TEMP"
# Run frequent jobs every minute:
* * * * * $RUN_PARTS $DIR_BASE2/cron.01m

EOF
fi

if has_exec 'cron.05m'; then
    cat <<EOF >>"$CRONTAB_TEMP"
# Run rapid jobs every 5 minutes:
*/5 * * * * $RUN_PARTS $DIR_BASE2/cron.05m

EOF
fi

if has_exec 'cron.15m'; then
    # use up to 14 minutes, to keep the fourth one under 60
    if [[ $RANDOM_TIMES -ne 0 ]]; then
        offset=$(rand_num 14)
    else
        offset=4
    fi

    offset_d=$(printf %02d "$offset")
    # Fifteen-minute intervals
    mins="${offset},$((offset+15)),$((offset+30)),$((offset+45))"
    desc=":${offset_d}, :$((offset+15)), :$((offset+30)) and :$((offset+45))"
    cat <<EOF >>"$CRONTAB_TEMP"
# Run rapid habitual cron jobs four times an hour at ${desc}:
$mins * * * * $RUN_PARTS $DIR_BASE2/cron.15m

EOF
    unset offset offset_desc mins desc
fi

if has_exec 'cron.30m'; then
    if [[ $RANDOM_TIMES -ne 0 ]]; then
        offset=$(rand_num 29)
    else
        offset=17
    fi

    offset_d=$(printf %02d "$offset")
    mins="${offset},$((offset+30))"
    desc=":${offset_d} and :$((offset+30))"
    cat <<EOF >>"$CRONTAB_TEMP"
# Run habitual cron jobs twice an hour at ${desc}:
$mins * * * * $RUN_PARTS $DIR_BASE2/cron.30m

EOF
    unset offset offset_d mins desc
fi

# Add the simple intervals
# These are controlled by cron, with @daily, @monthly, etc. in place of the
# "cron stars"
for interval in hourly daily weekly monthly yearly reboot; do
    # for pretty printing
    s_int="$(printf %-8s "$interval")"
    #s_int="$interval"$'\t'
    if has_exec "cron.$interval"; then
        cat <<EOF >>"$CRONTAB_TEMP"
@${s_int}ID=${s_int}$RUN_PARTS $DIR_BASE2/cron.${interval}

EOF
    fi
done

cat "$CRONTAB_TEMP"

if [[ $INTERACTIVE -eq 0 ]] || ask_yn 'Install this crontab' n; then
    crontab "$CRONTAB_TEMP"
fi
