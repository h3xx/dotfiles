# save a lot of lines (10kb per window)
set-option -g history-limit 10240

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
set-window-option -g aggressive-resize on

# general :: annoyances
# stop taking over the mouse, you do it poorly and buggy
set-option -g mouse off

# improve escape key responsiveness
set -s escape-time 0

# stop clobbering $DISPLAY every time I connect a new session.
# This is a total tmux MISFEATURE. Case in point: having to close and re-open
# xterm every time I come home.
set-option -g update-environment "SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID"

# set colors (note: screen-256color isn't supported in BSD, set it back to xterm in your .vimrc)
set-option -g default-terminal "screen-256color"

# set terminal window title
set -g set-titles on
set -g set-titles-string '#h'
set -g automatic-rename off
set-window-option -g automatic-rename off
set-window-option -g automatic-rename-format '#{pane_title}'

# status bar
# {{OLD
#set -g status-bg black
#set -g status-fg white
set -g status-interval 15
#set -g status-left-length 90
#set -g status-right-length 60
#set -g status-left "#[fg=cyan]#S#[fg=white]"
#set -g window-status-format         "#[fg=red]#I:#W#F"
#set -g window-status-current-format "#[fg=red,reverse]#I:#W#F"
#set -g status-right '#[fg=white]%R'
#set -g status-right "#[fg=white]#(~/.tmux/battery) %R"
# }}}

# This tmux statusbar config was created by tmuxline.vim (modified)
# on Fri, 15 Jan 2016

set -g status-bg "colour235"
set -g message-command-fg "colour222"
set -g status-justify "left"
set -g status-left-length "100"
set -g status "on"
set -g pane-border-fg "colour240"
set -g pane-active-border-fg "colour154"
set -g message-bg "colour27"
set -g status-right-length "100"
set -g status-right-attr "none"
set -g message-fg "colour222"
set -g message-command-bg "colour27"
set -g status-attr "none"
set -g status-utf8 "off"
set -g status-left-attr "none"
setw -g window-status-fg "colour39"
setw -g window-status-attr "none"
setw -g window-status-activity-bg "colour235"
setw -g window-status-activity-attr "none"
setw -g window-status-activity-fg "colour39"
setw -g window-status-separator ""
setw -g window-status-bg "colour235"

pane_bold='#[bold]'
pane1_color='#[fg=colour232,bg=colour39]'
pane1_bumpercolor='#[fg=colour39,bg=colour27]'
pane2_color='#[fg=colour232,bg=colour27]'
pane2_bumpercolor='#[fg=colour27,bg=colour235]'
pane3_color='#[fg=colour121]'

set -g status-left "$pane_bold$pane1_color #S $pane1_bumpercolor»$pane2_color#{?SSH_CONNECTION, ssh ,}#{?session_many_attached, #{session_attached} ,}$pane2_bumpercolor»"
set -g status-right "$pane3_color#{pane_current_command} $pane_bold$pane2_bumpercolor«$pane2_color#{?client_prefix, PREFIX ,}$pane1_bumpercolor«$pane1_color %R "
# equivalent with battery
#set -g status-right "$pane_bold$pane2_bumpercolor«$pane2_color#{?client_prefix, PREFIX ,} #(~/.tmux/battery) $pane1_bumpercolor«$pane1_color %R "

# host colors are red, blue
setw -g window-status-format "#[fg=red,bg=colour235]> #I:#W#F "
setw -g window-status-current-format "#[fg=colour232,bg=red,bold]» #I:#W#F "

bind-key R new-window -n root 'su -' \; \
	setw -q window-status-format "#[fg=blue,bg=colour235]> #I:#W#F " \; \
	setw -q window-status-current-format "#[fg=colour232,bg=blue,bold]» #I:#W#F "

# programs
tab_program_color='#[fg=colour255,bg=colour235]'
tab_program_color_selected='#[fg=colour232,bg=colour255,bold]'
bind-key O new-window -n 'mutt' 'mutt' \; \
	setw -q window-status-format "$tab_program_color> #I:#W#F " \; \
	setw -q window-status-current-format "$tab_program_color_selected» #I:#W#F "

bind-key C-m new-window -n 'mocp' 'mocp' \; \
	setw -q window-status-format "$tab_program_color> #I:#W#F " \; \
	setw -q window-status-current-format "$tab_program_color_selected» #I:#W#F "

bind-key a new-window -n 'alsamixer' 'alsamixer' \; \
	setw -q window-status-format "$tab_program_color> #I:#W#F " \; \
	setw -q window-status-current-format "$tab_program_color_selected» #I:#W#F "

# split programs
## C-b C-t => open tig in split pane
bind-key C-t split-window -h -l 81  -c '#{pane_current_path}' tig

# use vi bindings
set-window-option -g mode-keys vi
# to make ctrl-arrow, etc. work
set-window-option -g xterm-keys on

# key bindings :: annoyances
bind-key F1 resize-pane -x 81
bind-key t new-window
bind-key r source-file ~/.tmux.conf \; display-message "Reloaded ~/.tmux.conf"

# key bindings :: shortcuts
## ctrl-t => new window
bind-key -n C-t new-window

## ctrl-l/r arrows => switch windows l/r
bind-key -n M-Left previous-window
bind-key -n M-Right next-window

## vim-like window bindings
### note: "vertical" and "horizontal" split concepts are opposite from vim
bind-key v split-window -h -c '#{pane_current_path}'
bind-key s split-window -v -c '#{pane_current_path}'
unbind '"'
unbind %
# remap window navigation to vim
bind-key j select-pane -D
bind-key k select-pane -U
bind-key h select-pane -L
bind-key l select-pane -R

# vim-like copying commands
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection

## screen-like window bindings
### C-b x2 to toggle between windows
bind-key C-b last-window

# quickie terminal split
bind-key T split-window -h -p 20 -c '#{pane_current_path}'


if "[[ -e ~/.tmux-local.conf ]]" 'source-file ~/.tmux-local.conf'

# vi: ft=conf
