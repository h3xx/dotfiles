#!/bin/bash
# vi: et sts=4 sw=4 ts=4

# echo back each argument on a new line

USAGE() {
    printf 'Usage: %s [OPTIONS] [--] [LINES]\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Echo back each argument on a separate line.

  -h    Show this help message.
  -0    Use \\x00 (null) as a separator instead of newline.

Copyright (C) 2012-2022 Dan Church.
License GPLv3: GNU GPL version 3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
with Commons Clause 1.0 (https://commonsclause.com/).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
You may NOT use this software for commercial purposes.
EOF
}

SEP='\n'
while getopts '0h-' FLAG; do
    case "$FLAG" in
        '0')
            SEP='\0'
            ;;
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

for ARG; do
    # %b = expand backslashes
    # Works when arg starts with `-'
    # Not so well when it contains a null character, but that is acceptable
    printf -- '%s%b' "$ARG" "$SEP"
done
