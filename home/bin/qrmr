#!/bin/bash
# vi: et sts=4 sw=4 ts=4

# usefulness: *****
# options:
#  -s : shred(1) files before unlinking them. WARNING: if another instance of
#     this function is already running it may simply unlink the files
#

USAGE() {
    printf 'Usage: %s [OPTIONS] [--] FILE...\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Delete a huge directory in the background so you can do more interesting things
with the terminal.

  -h        Show this help message.
  -f        Remove in the foreground instead of the background.
  -s        Shred instead of just rm.
  --        Terminate options list.

Copyright (C) 2010-2021 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
}

SHRED=0
FOREGROUND=0

while getopts 'hfs-' FLAG; do
    case "$FLAG" in
        'f')
            FOREGROUND=1
            ;;
        's')
            SHRED=1
            ;;
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

if [[ $# -lt 1 ]]; then
    USAGE >&2
    exit 1
fi

LOCK_FILE=.qrmr.lock

do_ionice() {
    ionice -c 3 "$@"
}

do_remove() {
    local DIR=$1
    (
        flock -x 9
        # Fix permissions so we can remove it
        do_ionice find "$DIR"/* -type d -exec chmod u+w,g+w,o+w -- {} +
        if [[ $SHRED -ne 0 ]]; then
            do_ionice find "$DIR"/* -type f -exec shred -zu -- {} + &&
            do_ionice find "$DIR"/* -type d -empty -delete
        fi &&
        do_ionice rm -rf -- "$DIR"/* "$DIR"
    ) 9>"$DIR/$LOCK_FILE"
}

if [[ $SHRED -ne 0 ]]; then
    DIRS=(
        ZZZ-shred
        YYY-shred
    )
else
    DIRS=(
        ZZZ
        YYY
    )
fi

for DIR in "${DIRS[@]}"; do
    if [[ ! -d $DIR ]]; then
        mkdir -p -- "$DIR" &&
        touch "$DIR"/.okaytodelete
        for FN; do
            # Fix permissions so we can move it
            if [[ ! -L $FN ]]; then
                if [[ -d $FN ]]; then
                    chmod u+w,g+w,o+w -- "$FN"
                fi
            fi
            mv -- "$FN" "$(mktemp -dp "$DIR" 'qrmr.XXXXXX')"
        done
        if [[ $FOREGROUND -ne 0 ]]; then
            do_remove "$DIR"
        else
            do_remove "$DIR" &
        fi
        exit
    elif [[ -e $DIR/.okaytodelete ]]; then
        if ! flock -n "$DIR/$LOCK_FILE" -c :; then
            # There's a lock on the dir; there's a process in the middle of
            # deleting it.
            # Ergo, we can simply move it into the directory and it should
            # automatically remove it.
            printf 'Using existing directory %s\n' \
                "$DIR" \
                >&2
            for FN; do
                mv -- "$FN" "$(mktemp -dp "$DIR" 'qrmr.XXXXXX')"
            done
            exit
        fi
    fi
    printf \
        '`%s'\'' exists, but cannot be used.\n' \
        "$DIR" \
        >&2
done

printf 'Unable to queue deletions.\n' >&2
exit 1
