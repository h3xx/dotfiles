#!/bin/sh
# decodes any video/audio file supported by mplayer(1) into a standard PCM wav
# file

HELP_MESSAGE() {
	local EXIT_CODE="${1:-0}"
	cat <<EOF
Usage: $(basename -- "$0") [OPTIONS] [FILE]...
Decode any audio/video file to PCM WAV files.

  -h		Show this help message.
  -j NUM	Use NUM threads when decoding/encoding. Automatically
		  determined by counting the number of CPU cores.
  -s NUM	Resample the audio to NUM samples/second.
  -C		Use the standard CD sampling rate (44.1 kHz).
  -c NUM	Set the number of output channels.
  -x EXT	Use EXT as the output file extension (default is \`.wav').
  -f FORMAT	Use FORMAT as the format (default is \`wav';
		  see \`ffmpeg -formats' for a full list).

Copyright (C) 2010-2011 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
	exit "$EXIT_CODE"
}

# determine number of jobs from number of CPU cores in the system
NUM_JOBS="$(
	if [ -f '/proc/cpuinfo' ]; then
		grep '^processor' '/proc/cpuinfo' |
		wc --lines
	else
		echo 1
	fi
)"

EXT='.wav'
SAMPLING_RATE=''
CHANNELS=''
OUT_FORMAT='wav'

while getopts 'j:s:Cc:x:f:h' flag; do
	case "$flag" in
		'j')
			NUM_JOBS="$OPTARG"
			;;
		's')
			SAMPLING_RATE="$OPTARG"
			;;
		'C')
			SAMPLING_RATE=44100
			;;
		'c')
			CHANNELS="$OPTARG"
			;;
		'x')
			EXT="$OPTARG"
			;;
		'f')
			OUT_FORMAT="$OPTARG"
			;;
		'h')
			HELP_MESSAGE 0
			;;
		*)
			HELP_MESSAGE 1
			;;
	esac
done

shift "$((OPTIND-1))"

TEMP_FILES=()

cleanup() {
	rm -f -- "${TEMP_FILES[@]}"
}

trap 'cleanup'	EXIT

# process multiple files in parallel processes
#
# schedules the filenames passed to the function to execute in parallel by
# calling this script for each file
#
# this function only runs if there are multiple files specified on the
# command line
#
# XXX : it is VERY IMPORTANT that the self-calls initiated here are given only
#	one file argument or this script will loop recursively forever
schedule_process() {
	local \
		xargs_opts \
		self_args \
		file

	# intial options
	xargs_opts=(
		'--null'		# accept null-terminated list
		'--max-args=1'		# send only one list item for each
					# process (VERY IMPORTANT!!!)
		"--max-procs=$NUM_JOBS"	# execute on parallel process per core
		'--'			# terminate option list
	)

	self_args=()

	if [ -n "$SAMPLING_RATE" ]; then
		self_args+=('-s' "$SAMPLING_RATE")
	fi

	if [ -n "$CHANNELS" ]; then
		self_args+=('-c' "$CHANNELS")
	fi

	if [ -n "$EXT" ]; then
		self_args+=('-x' "$EXT")
	fi

	if [ -n "$OUT_FORMAT" ]; then
		self_args+=('-f' "$OUT_FORMAT")
	fi

	self_exec=(
		"$0"		# call self
		"${self_args[@]}"
	)

	# add the self-execution to what xargs(1) executes
	xargs_opts+=(
		"${self_exec[@]}"
	)

	# translate into null-separated list for maximum xargs security
	for file; do
		echo -n "$file"
		echo -ne '\0'
	done |

	# pipe it to xargs which will perform the scheduling, passing one
	# file to another running copy of this script
	# XXX : it is VERY important that only ONE file file get passed or the
	#	script will get stuck in an infinite recursion loop
	xargs "${xargs_opts[@]}"
}

# process a single file
#
# runs only if the script is given only one argument, which happens when the
# script is self-executed via xargs(1) from the schedule_process() function
single_process() {
	wav_decode "$@"
}

wav_decode() {
	local \
		ffmpeg_opts \
		file \
		temp

	ffmpeg_opts=(
		'-y'			# force overwrite
		'-f'	"$OUT_FORMAT"	# force output format
	)

	if [ -n "$NUM_JOBS" ]; then
		ffmpeg_opts+=('-threads' "$NUM_JOBS")
	fi

	if [ -n "$SAMPLING_RATE" ]; then
		ffmpeg_opts+=('-ar' "$SAMPLING_RATE")
	fi

	if [ -n "$CHANNELS" ]; then
		ffmpeg_opts+=('-ac' "$CHANNELS")
	fi

	for file; do

		temp="$(mktemp -t "$(basename -- "$0").XXXXXX")"
		TEMP_FILES+=("$temp")

		#mplayer \
		#	-srate 44100 \
		#	-vo null \
		#	-vc null \
		#	-ao pcm:fast:file="$fn.wav" \
		#	"$fn" || exit

		# (ffmpeg is meant for doing this and does it faster)
		ffmpeg \
			-i "$file" \
			"${ffmpeg_opts[@]}" \
			"$temp" &&

		touch \
			--reference="$file" \
			-- \
			"$temp" &&

		chmod \
			--reference="$file" \
			-- \
			"$temp" &&

		mv \
			-- \
			"$temp" \
			"${file}${EXT}" ||

			return "$?"
	done
}

if [ "$#" -eq 1 ]; then
	# only one file specified; no need to run parallel processes
	single_process "$@"
else
	# multiple files specified; process them in parallel
	schedule_process "$@"
fi

#for file; do
#	temp="$(mktemp -t "$(basename -- "$0").XXXXXX")"
#	TEMP_FILES+=("$temp")
#
#	#mplayer \
#	#	-srate 44100 \
#	#	-vo null \
#	#	-vc null \
#	#	-ao pcm:fast:file="$fn.wav" \
#	#	"$fn" || exit
#
#	# (ffmpeg is meant for doing this and does it faster)
#	ffmpeg \
#		-i "$file" \
#		"${FFMPEG_OPTS[@]}" \
#		"$temp" &&
#	touch --reference="$file" -- "$temp" &&
#	chmod --reference="$file" -- "$temp" &&
#	mv -- "$temp" "${file}${EXT}" || exit
#done
