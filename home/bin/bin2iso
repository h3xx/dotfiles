#!/bin/bash
# vi: et sts=4 sw=4 ts=4

USAGE() {
    printf 'Usage: %s [OPTIONS] [--] CUE|BIN [BASE]\n' \
        "${0##*/}" \
        >&2
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Make bin/cue images into meaningful information using bchunk.

  -h        Show this help message.

Copyright (C) 2012-2022 Dan Church.
License GPLv3: GNU GPL version 3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
with Commons Clause 1.0 (https://commonsclause.com/).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
You may NOT use this software for commercial purposes.
EOF
}

while getopts 'h-' FLAG; do
    case "$FLAG" in
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

FILE_IN=$1

shopt -s nullglob

first_file() {
    local FILE
    for FILE; do
        if [[ -f $FILE ]]; then
            printf '%s\n' "$FILE"
            return 0
        fi
    done
}

BASE=${FILE_IN%.*}
case "$FILE_IN" in
    *.[Cc][Uu][Ee])
        BIN_IN=$(first_file "$BASE".[Bb][Ii][Nn])
        CUE_IN=$FILE_IN
        ;;
    *.[Bb][Ii][Nn])
        BIN_IN=$FILE_IN
        CUE_IN=$(first_file "$BASE".[Cc][Uu][Ee])
        ;;
    *)
        # ?
        CUE_IN=$FILE_IN
        BIN_IN=$FILE_IN
        ;;
esac

if [[ ! -e $BIN_IN || ! -e $CUE_IN ]]; then
    echo "$BIN_IN $CUE_IN"
    echo 'Missing file!' >&2
    exit 2
fi

if [[ -z $BASE ]]; then
    BASE=${2:-track}
fi

# good to go
exec bchunk -w -- "$BIN_IN" "$CUE_IN" "$BASE"
