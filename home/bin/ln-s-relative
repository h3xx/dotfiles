#!/bin/bash
# vi: et sts=4 sw=4 ts=4

# Script first conceived 2021-11-26

USAGE() {
    printf 'Usage: %s SOURCE... DIRECTORY\n' \
        "${0##*/}"
    printf '  or: %s SOURCE DEST\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Install relative symlinks.

  -h,--help         Show this help message.
  -f,--force        Overwrite destination.
  --directory=DIR   Install all symlinks into DIR.
                      If unspecified, it uses the last argument as a directory.
                      If only one argument is given, the current directory is used.
  --                Terminate options list.

Copyright (C) 2021-2022 Dan Church.
License GPLv3: GNU GPL version 3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
with Commons Clause 1.0 (https://commonsclause.com/).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
You may NOT use this software for commercial purposes.
EOF
}

TRY_HELP_MESSAGE() {
    printf 'Try "%s --help" for more information.\n' \
        "${0##*/}"
}

TARGET_DIR=
FILES=()
NO_MORE_FLAGS=0
LN_ARGS=(
    -s
)
for ARG; do
    # Assume arguments that don't begin with a - are supposed to be files or
    # other operands
    if [[ $NO_MORE_FLAGS -eq 0 && $ARG = -* ]]; then
        case "$ARG" in
            --directory=)
                TARGET_DIR=${ARG#*=}
                ;;
            --help|-h)
                HELP_MESSAGE
                exit 0
                ;;
            --force|-f)
                LN_ARGS+=(-f)
                ;;
            --)
                NO_MORE_FLAGS=1
                ;;
            *)
                printf 'Unrecognized flag: %s\n' \
                    "$ARG" \
                    >&2
                USAGE >&2
                exit 2
                ;;
        esac
    else
        FILES+=("$ARG")
    fi
done

check_required_binaries() {
    local BIN MISSING=()
    for BIN; do
        if ! type -t "$BIN" &>/dev/null; then
            MISSING+=("$BIN")
        fi
    done
    if [[ ${#MISSING[@]} -gt 0 ]]; then
        printf 'Error: You are missing required programs:\n' >&2
        for BIN in "${MISSING[@]}"; do
            printf -- '- %s\n' "$BIN" >&2
        done
        exit 2
    fi
}

check_required_binaries \
    realpath

if [[ $# -lt 2 ]]; then
    printf '%s: Missing file operand\n' \
        "${0##*/}" \
        >&2
    TRY_HELP_MESSAGE >&2
    exit 1
fi

if [[ -z $TARGET_DIR ]]; then
    if [[ ${#FILES[@]} -gt 2 ]]; then
        TARGET_DIR=${FILES[-1]}
        # Remove the last element of the array
        # Note: subject to [] glob
        unset 'FILES[-1]'
    elif [[ ${#FILES[@]} -eq 1 ]]; then
        TARGET_DIR=.
    fi
fi

ERRORS=()
if [[ -n $TARGET_DIR ]]; then
    if [[ ! -d $TARGET_DIR ]]; then
        printf 'Not a directory: %s\n' \
            "$TARGET_DIR" >&2
        exit 1
    fi

    for FILE in "${FILES[@]}"; do
        if ! ln "${LN_ARGS[@]}" -- \
            "$(realpath --relative-to="$TARGET_DIR" "$FILE")" \
            "$TARGET_DIR/${FILE##*/}"
        then
            ERRORS+=("Failed to create $TARGET_DIR/${FILE##*/}")
        fi
    done
else
    REL_TO=${FILES[1]}
    if [[ ! -e $REL_TO ]]; then
        REL_TO=${REL_TO%/*}
    fi
    if ! \
        ln "${LN_ARGS[@]}" -- \
            "$(realpath --relative-to="$REL_TO" "${FILES[0]}")" \
            "${FILES[1]}"
    then
        ERRORS+=("Failed to create ${FILES[1]}")
    fi
fi

if [[ ${#ERRORS[@]} -gt 0 ]]; then
    for ERROR in "${ERRORS[@]}"; do
        printf 'Error: %s\n' "$ERROR" >&2
    done
    exit 1
fi
