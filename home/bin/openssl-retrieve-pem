#!/bin/bash
# vi: et sts=4 sw=4 ts=4

USAGE() {
    printf 'Usage: %s [OPTIONS] [SERVERS]...\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Retrieve SSL certificates.

  -o FILE   Output to FILE. Default is STDOUT.
  -p PORT   Connect to server on PORT. Default is 443, the HTTPS port.
  -b        Format the bare key only, not including x509 header information.
  -h        Print this help message.

Copyright (C) 2010-2014 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
}

PORT='443'
OUT=
TEXT=1
CAFILE='/etc/ssl/certs/ca-certificates.crt'
while getopts 'o:p:bh' FLAG; do
    case "$FLAG" in
        'o')
            OUT=$OPTARG
            ;;
        'p')
            PORT=$OPTARG
            ;;
        'b')
            TEXT=0
            ;;
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

if [[ $# -lt 1 ]]; then
    USAGE >&2
    exit 2
fi

S_CLIENT_OPTS=()
X509_OPTS=()

if [[ $TEXT -ne 0 ]]; then
    X509_OPTS+=('-text')
fi
if [[ -n $OUT ]]; then
    X509_OPTS+=('-out' "$OUT")
fi

if [[ -f $CAFILE ]]; then
    S_CLIENT_OPTS+=('-CAfile' "$CAFILE")
fi

for SERVER; do
    # note: `</dev/null' will make it so s_client will not wait for command
    # inputs, which would cause the session to hang until the session is closed
    openssl s_client \
        "${S_CLIENT_OPTS[@]}" \
        -connect "$SERVER:$PORT" </dev/null |
    openssl x509 \
        "${X509_OPTS[@]}"
done
