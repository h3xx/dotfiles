#!/bin/bash
# vi: et sts=4 sw=4 ts=4
HELP_MESSAGE() {
    local EXIT_CODE=${1:-0}
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [FILE]...
Add a handy \`config()' function for configuration files while building
Slackware packages.

  -h            Show this help message.
  -c            Create FILE if it doesn't exist.
  -o DOINST     Output to DOINST. Use \`-' to output to STDOUT. Default is
                  \`ROOTDIR/install/doinst.sh'.
  -r            Auto-rename files to \`FILE.new'.
  -R ROOTDIR    Use ROOTDIR as the package root directory.

Copyright (C) 2010-2021 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
    exit "$EXIT_CODE"
}

RENAME=0
CREATE=0
PKG_ROOT='.'
OUT=

while getopts 'hco:rR:' flag; do
    case "$flag" in
        'c')
            CREATE=1
            ;;
        'o')
            OUT=$OPTARG
            ;;
        'r')
            RENAME=1
            ;;
        'R')
            PKG_ROOT=$OPTARG
            ;;
        'h')
            HELP_MESSAGE 0
            ;;
        *)
            HELP_MESSAGE 1
            ;;
    esac
done

shift "$((OPTIND-1))"

TEMP_FILES=()

cleanup() {
    rm -f -- "${TEMP_FILES[@]}"
}

trap 'cleanup' EXIT

# Add a "config [file]" instruction to the doinst.sh file
#
# makes sure a 'config()' function gets put at the top of the install script
# (if it's not there already)
#
# arguments:
#   1: doinst.sh file
#   2: the line
add_config_line_to_doinst() {
    local \
        doinst=$1 \
        config_line=$2 \

    # make sure the file gets deleted on exit

    # if it exists and it's not a file, then we must be outputting to
    # STDOUT.
#   if [ -e "$doinst" -a ! -f "$doinst" ]; then
#   fi

    if [[ ! -d $(dirname -- "$doinst") ]]; then
        mkdir -p "$(dirname -- "$doinst")" ||
            return
    fi

    # truth table
    #
    # conditions:
    #  ex:  old doinst.sh file exists
    #  grp: config() exists in old doinst.sh
    #
    # outcomes:
    #  add: append config function to new doinst.sh file
    #
    # ex    | grp   | add
    # ------|-------|----
    # 0 | x | 1
    # 1 | 0 | 1
    # 1 | 1 | 0

    if [[ ! -f $doinst ]] ||
        ! grep -q -- '^config() {$' "$doinst"; then

        local backup_file=$(mktemp -t "$(basename -- "$0").XXXXXX")
        TEMP_FILES+=("$backup_file")

        # this is Patrick Volkerding's config() function
        # (I know it's insecure)
        cat <<'EOF' >> "$backup_file" &&
config() {
  NEW="$1"
  OLD="`dirname $NEW`/`basename $NEW .new`"
  # If there's no config file by that name, mv it over:
  if [ ! -r $OLD ]; then
    mv $NEW $OLD
  elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then # toss the redundant copy
    rm $NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

EOF

        printf '%s\n' "$config_line" >> "$backup_file" &&
        if [[ -f $doinst ]]; then
            cat -- "$doinst" >> "$backup_file"
        fi &&
        # XXX Can't just move file; what if outputting to STDOUT?
        cat -- "$backup_file" > "$doinst"
    else
        printf '%s\n' "$config_line" >> "$doinst"
    fi
}

smartquote() {
    local ARG=$1
    if [[ $ARG = *[^:@,./%^_=+a-zA-Z0-9-]* ]]; then
        ARG=\'${ARG//'/'\\''}\'
    fi
    printf '%s\n' "$ARG"
}

# main function
#
# arguments:
#   1:   doinst.sh output file
#   ...: names of files to process
handy_config() {
    local \
        doinst_out=$1 \
        rootdir=$2 \
        conffile \
        conffile_inst

    shift 2

    # remove trailing slashes from root directory
#   while [ "${rootdir%/}" != "$rootdir" ]; do
#       rootdir="${rootdir%/}"
#   done

    for conffile; do
        # kill the root directory part of the conf file name
        conffile_inst=$(realpath -- "$conffile")
        conffile_inst=${conffile_inst#$(realpath -- $rootdir)/}

        # rename files if wanted
        #
        # this also affects creation of new files:
        # if on, then the file, plus `.new' is created; otherwise, just
        # the plain file
        if [[ $RENAME -ne 0 ]]; then
            if [[ ${conffile%.new} != $conffile ]]; then
                echo "Warning: $conffile already contains .new suffix" >&2
            fi
            mv -- "$conffile"{,.new}
            conffile+='.new'
            conffile_inst+='.new'
        fi

        # create files if wanted
        if [[ $CREATE -ne 0 ]]; then
            if [[ ! -d $(dirname -- "$conffile") ]]; then
                mkdir -p -- "$(dirname -- "$conffile")" ||
                    return
            fi

            if [[ ! -e $conffile ]]; then
                touch -- "$conffile"
            fi
        fi

        add_config_line_to_doinst "$doinst_out" "config $(smartquote "$conffile_inst")"
    done
}

if [[ $# -eq 0 ]]; then
    HELP_MESSAGE 2
fi

if [[ -z $OUT ]]; then
    OUT="${PKG_ROOT:-.}/install/doinst.sh"
elif [[ $OUT = '-' ]]; then
    OUT='/dev/stdout'
fi

handy_config "$OUT" "$PKG_ROOT" "$@"
