#!/bin/bash
# vi: et sts=4 sw=4 ts=4
HELP_MESSAGE() {
    local EXIT_CODE=${1:-0}
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [FILE]...
Add a handy \`config()' function for configuration files while building
Slackware packages.

  -h            Show this help message.
  -c            Create FILE if it doesn't exist.
  -d            Delete FILE.new file if it doesn't match.
  -o DOINST     Output to DOINST. Use \`-' to output to STDOUT. Default is
                  \`ROOTDIR/install/doinst.sh'.
  -p            Preserve permissions when replacing files (suitable for e.g.
                  scripts in /etc/rc.d).
  -r            Auto-rename files to \`FILE.new'.
  -R ROOTDIR    Use ROOTDIR as the package root directory.

Copyright (C) 2010-2021 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
    exit "$EXIT_CODE"
}

RENAME=0
CREATE=0
PKG_ROOT='.'
OUT=
DELETE_NEW=0
PRESERVE_PERMS=0

while getopts 'hcdo:prR:' flag; do
    case "$flag" in
        'c')
            CREATE=1
            ;;
        'd')
            DELETE_NEW=1
            ;;
        'o')
            OUT=$OPTARG
            ;;
        'p')
            PRESERVE_PERMS=1
            ;;
        'r')
            RENAME=1
            ;;
        'R')
            PKG_ROOT=$OPTARG
            ;;
        'h')
            HELP_MESSAGE 0
            ;;
        *)
            HELP_MESSAGE 1
            ;;
    esac
done

shift "$((OPTIND-1))"

TEMP_FILES=()

cleanup() {
    rm -f -- "${TEMP_FILES[@]}"
}

trap 'cleanup' EXIT

print_config_fn() {
    # this is Patrick Volkerding's config() function
    # (I know it's insecure)
    cat <<'EOCONFIG'
config() {
  NEW="$1"
  OLD="$(dirname $NEW)/$(basename $NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r $OLD ]; then
    mv $NEW $OLD
  elif [ "$(cat $OLD | md5sum)" = "$(cat $NEW | md5sum)" ]; then
    # toss the redundant copy
    rm $NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

EOCONFIG
}

print_config_scorefile_fn() {
    cat <<'EOCONFIG'
config_scorefile() {
  NEW=$1
  OLD=$(dirname "$NEW")/$(basename "$NEW" .new)
  # If there's no scores file by that name, mv it over:
  if [ -r "$NEW" ] && [ ! -r "$OLD" ]; then
    mv "$NEW" "$OLD"
  else
    # Otherwise, toss the .new copy
    rm -f "$NEW"
  fi
}

EOCONFIG
}

print_preserve_perms_fn() {
    cat <<'EOPRESERVE_PERMS'
preserve_perms() {
  NEW="$1"
  OLD="$(dirname $NEW)/$(basename $NEW .new)"
  if [ -e $OLD ]; then
    cp -a $OLD ${NEW}.incoming
    cat $NEW > ${NEW}.incoming
    mv ${NEW}.incoming $NEW
  fi
  config $NEW
}

EOPRESERVE_PERMS
}

print_preserve_perms_scorefile_fn() {
    cat <<'EOPRESERVE_PERMS'
preserve_perms_scorefile() {
  NEW="$1"
  OLD="$(dirname $NEW)/$(basename $NEW .new)"
  if [ -e $OLD ]; then
    cp -a $OLD ${NEW}.incoming
    cat $NEW > ${NEW}.incoming
    mv ${NEW}.incoming $NEW
  fi
  config_scorefile $NEW
}

EOPRESERVE_PERMS
}

add_functions_to_doinst() {
    local \
        DOINST=$1 \
        FUNCTION \
        GENERATOR \
        TEMP \

    shift 1

    for FUNCTION; do
        mkdir -p -- "$(dirname -- "$DOINST")" || exit

        GENERATOR="print_${FUNCTION}_fn"
        if [[ $(type -t "$GENERATOR") != 'function' ]]; then
            printf 'Unable to generate function "%s"\n' "$FUNCTION" >&2
            exit 2
        else
            if [[ ! -f $DOINST ]] ||
                ! grep -q -- "^$FUNCTION() {$" "$DOINST"; then
                # Function not defined in script, add it

                TEMP=$(mktemp -t "${0##*/}.XXXXXX")
                TEMP_FILES+=("$TEMP")

                "$GENERATOR" >> "$TEMP" &&

                if [[ -f $DOINST ]]; then
                    cat -- "$DOINST" >> "$TEMP"
                fi &&
                # XXX Can't just move file; what if outputting to STDOUT?
                cat -- "$TEMP" > "$DOINST"
            fi
        fi
    done
}

# Add a "config [file]" instruction to the doinst.sh file
#
# makes sure a 'config()' function gets put at the top of the install script
# (if it's not there already)
#
# arguments:
#   1: doinst.sh file
#   2: the path to the config file
add_config_line_to_doinst() {
    local \
        DOINST=$1 \
        CONFFILE_INST=$2 \
        PROC_FUNC \
        ADDL_FUNCS=() \

    if [[ $DELETE_NEW -ne 0 ]]; then
        if [[ $PRESERVE_PERMS -ne 0 ]]; then
            PROC_FUNC='preserve_perms_scorefile'
            ADDL_FUNCS=('config_scorefile')
        else
            PROC_FUNC='config_scorefile'
        fi
    elif [[ $PRESERVE_PERMS -ne 0 ]]; then
        PROC_FUNC='preserve_perms'
        ADDL_FUNCS=('config')
    else
        PROC_FUNC='config'
    fi

    add_functions_to_doinst "$DOINST" "$PROC_FUNC" "${ADDL_FUNCS[@]}"
    printf '%s\n' "$PROC_FUNC $(smartquote "$CONFFILE_INST")" >> "$DOINST"
}

smartquote() {
    local ARG=$1
    if [[ $ARG = *[^:@,./%^_=+a-zA-Z0-9-]* ]]; then
        ARG=\'${ARG//'/'\\''}\'
    fi
    printf '%s\n' "$ARG"
}

# main function
handy_config() {
    local \
        DOINST_OUT=$1 \
        ROOTDIR=$2 \
        CONFFILE \
        CONFFILE_INST \

    shift 2

    for CONFFILE; do
        # create files if wanted
        if [[ ! -e $CONFFILE ]]; then
            if [[ $CREATE -ne 0 ]]; then
                mkdir -p -- "$(dirname -- "$CONFFILE")" &&
                touch -- "$CONFFILE" || exit
            else
                printf 'Unable to configure non-existent file "%s"\n' "$CONFFILE" >&2
                exit 2
            fi
        fi

        # kill the root directory part of the conf file name
        CONFFILE_INST=$(realpath -- "$CONFFILE")
        CONFFILE_INST=${CONFFILE_INST#$(realpath -- "$ROOTDIR")/}

        # rename files if wanted
        #
        # this also affects creation of new files:
        # if on, then the file, plus `.new' is created; otherwise, just
        # the plain file
        if [[ $RENAME -ne 0 ]]; then
            if [[ ${CONFFILE%.new} != "$CONFFILE" ]]; then
                printf 'Warning: %s already contains .new suffix\n' "$CONFFILE" >&2
            fi
            mv -- "$CONFFILE"{,.new} || exit
            CONFFILE+='.new'
            CONFFILE_INST+='.new'
        fi

        add_config_line_to_doinst "$DOINST_OUT" "$CONFFILE_INST"
    done
}

if [[ $# -eq 0 ]]; then
    HELP_MESSAGE 2
fi

if [[ -z $OUT ]]; then
    OUT="${PKG_ROOT:-.}/install/doinst.sh"
elif [[ $OUT = '-' ]]; then
    OUT='/dev/stdout'
fi

handy_config "$OUT" "$PKG_ROOT" "$@"
