#!/bin/bash
# vi: et sts=4 sw=4 ts=4

USAGE() {
    printf 'Usage: %s [OPTIONS] [FILE]...\n' \
        "${0##*/}"
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Add a handy \`config()' function for configuration files while building
Slackware packages.

  -h            Show this help message.
  -c            Create FILE if it doesn't exist.
  -d            Delete FILE.new file if it doesn't match.
  -o DOINST     Output to DOINST. Use \`-' to output to STDOUT. Default is
                  \`ROOTDIR/install/doinst.sh'.
  -r            Auto-rename files to \`FILE.new'.
  -R ROOTDIR    Use ROOTDIR as the package root directory.

Copyright (C) 2010-2021 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF
}

RENAME=0
CREATE=0
PKG_ROOT='.'
OUT=
DELETE_NEW=0

while getopts 'hcdo:rR:' FLAG; do
    case "$FLAG" in
        'c')
            CREATE=1
            ;;
        'd')
            DELETE_NEW=1
            ;;
        'o')
            OUT=$OPTARG
            ;;
        'r')
            RENAME=1
            ;;
        'R')
            PKG_ROOT=$OPTARG
            ;;
        'h')
            HELP_MESSAGE
            exit 0
            ;;
        *)
            printf 'Unrecognized flag: %s\n' \
                "$FLAG" \
                >&2
            USAGE >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))"

TEMP_FILES=()

cleanup() {
    rm -f -- "${TEMP_FILES[@]}"
}

trap 'cleanup' EXIT

print_config_fn() {
    if [[ $DELETE_NEW -eq 0 ]]; then
        # this is Patrick Volkerding's config() function
        # (I know it's insecure)
        cat <<'EOCONFIG'
config() {
  NEW="$1"
  OLD="`dirname $NEW`/`basename $NEW .new`"
  # If there's no config file by that name, mv it over:
  if [ ! -r $OLD ]; then
    mv $NEW $OLD
  elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then # toss the redundant copy
    rm $NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

EOCONFIG
    else
        cat <<'EOCONFIG'
config() {
  NEW=$1
  OLD=$(dirname "$NEW")/$(basename "$NEW" .new)
  # If there's no scores file by that name, mv it over:
  if [ -r "$NEW" ] && [ ! -r "$OLD" ]; then
    mv "$NEW" "$OLD"
  else
    # Otherwise, toss the .new copy
    rm -f "$NEW"
  fi
}

EOCONFIG
    fi
}

# Add a "config [file]" instruction to the doinst.sh file
#
# makes sure a 'config()' function gets put at the top of the install script
# (if it's not there already)
#
# arguments:
#   1: doinst.sh file
#   2: the line
add_config_line_to_doinst() {
    local \
        DOINST=$1 \
        config_line=$2 \

    # make sure the file gets deleted on exit

    if [[ ! -d $(dirname -- "$DOINST") ]]; then
        mkdir -p "$(dirname -- "$DOINST")" ||
            return
    fi

    # truth table
    #
    # conditions:
    #  ex:  old doinst.sh file exists
    #  grp: config() exists in old doinst.sh
    #
    # outcomes:
    #  add: append config function to new doinst.sh file
    #
    # ex    | grp   | add
    # ------|-------|----
    # 0 | x | 1
    # 1 | 0 | 1
    # 1 | 1 | 0

    if [[ ! -f $DOINST ]] ||
        ! grep -q -- '^config() {$' "$DOINST"; then

        local -r BACKUP_FILE=$(mktemp -t "${0##*/}.XXXXXX")
        TEMP_FILES+=("$BACKUP_FILE")

        print_config_fn >> "$BACKUP_FILE" &&

        printf '%s\n' "$config_line" >> "$BACKUP_FILE" &&
        if [[ -f $DOINST ]]; then
            cat -- "$DOINST" >> "$BACKUP_FILE"
        fi &&
        # XXX Can't just move file; what if outputting to STDOUT?
        cat -- "$BACKUP_FILE" > "$DOINST"
    else
        printf '%s\n' "$config_line" >> "$DOINST"
    fi
}

smartquote() {
    local ARG=$1
    if [[ $ARG = *[^:@,./%^_=+a-zA-Z0-9-]* ]]; then
        ARG=\'${ARG//'/'\\''}\'
    fi
    printf '%s\n' "$ARG"
}

# main function
#
# arguments:
#   1:   doinst.sh output file
#   ...: names of files to process
handy_config() {
    local \
        DOINST_OUT=$1 \
        ROOTDIR=$2 \
        CONFFILE \
        CONFFILE_INST \

    shift 2

    for CONFFILE; do
        # kill the root directory part of the conf file name
        CONFFILE_INST=$(realpath -- "$CONFFILE")
        CONFFILE_INST=${CONFFILE_INST#"$(realpath -- "$ROOTDIR")"/}

        # rename files if wanted
        #
        # this also affects creation of new files:
        # if on, then the file, plus `.new' is created; otherwise, just
        # the plain file
        if [[ $RENAME -ne 0 ]]; then
            if [[ ${CONFFILE%.new} != "$CONFFILE" ]]; then
                printf 'Warning: %s already contains .new suffix\n' "$CONFFILE" >&2
            fi
            mv -- "$CONFFILE"{,.new}
            CONFFILE+='.new'
            CONFFILE_INST+='.new'
        fi

        # create files if wanted
        if [[ $CREATE -ne 0 ]]; then
            if [[ ! -d $(dirname -- "$CONFFILE") ]]; then
                mkdir -p -- "$(dirname -- "$CONFFILE")" ||
                    return
            fi

            if [[ ! -e $CONFFILE ]]; then
                touch -- "$CONFFILE"
            fi
        fi

        add_config_line_to_doinst "$DOINST_OUT" "config $(smartquote "$CONFFILE_INST")"
    done
}

if [[ $# -eq 0 ]]; then
    USAGE
    exit 2
fi

if [[ -z $OUT ]]; then
    OUT="${PKG_ROOT:-.}/install/doinst.sh"
elif [[ $OUT = '-' ]]; then
    OUT='/dev/stdout'
fi

handy_config "$OUT" "$PKG_ROOT" "$@"
