#!/bin/sh

# version 1.0.1

HELP_MESSAGE() {
	local EXIT_CODE="${1:-0}"
	cat <<EOF
Usage: $(basename -- "$0") [OPTIONS] -a|INSTALLED_PACKAGE_NAME
Compare a build jail with an installed Slackware package.

  -h		Show this help message.
  -a		Try to determine INSTALLED_PACKAGE_NAME automatically.
  -i		Ignore autogenerated files in both packages.
  -p		Output a plain diff (default is side-by-side).
  -B		Do not simulate built files (like /install/doinst.sh if links
		  exist).
  -C		Do not attempt to use colordiff (default is to use it if
		  available).
  -D		Do not simplify documentation directories when comparing.
		  Simplification is done so that the documentation directories
		  can be compared across package versions.
  -S		Do not attempt to fix Slackware cruft.
  -L SED_PROG	Apply sed(1) program SED_PROG to left output.
  -R SED_PROG	Apply sed(1) program SED_PROG to right output.

Copyright (C) 2010-2015 Dan Church.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
	exit "$EXIT_CODE"
}

PACKAGES='/var/log/packages'

USE_COLORDIFF="$([ "$(type -t colordiff)" != 'file' ] ; echo "$?")"
PLAIN_DIFF=0
FIX_DOCS=1
FIX_SLACKWARE_CRUFT=1
AUTOMATIC_PKG=0
SIMULATE_BUILT=1
IGNORE_BUILT=0
SED_LEFT=()
SED_RIGHT=()
while getopts 'haCpDSBiL:R:' flag; do
	case "$flag" in
		'a')
			AUTOMATIC_PKG=1
			;;
		'C')
			USE_COLORDIFF=0
			;;
		'p')
			PLAIN_DIFF=1
			;;
		'D')
			FIX_DOCS=0
			;;
		'S')
			FIX_SLACKWARE_CRUFT=0
			;;
		'B')
			SIMULATE_BUILT=0
			;;
		'i')
			IGNORE_BUILT=1
			;;
		'L')
			SED_LEFT+=("$OPTARG")
			;;
		'R')
			SED_RIGHT+=("$OPTARG")
			;;
		'h')
			HELP_MESSAGE 0
			;;
		*)
			HELP_MESSAGE 1
			;;
	esac
done

shift "$((OPTIND-1))"

TEMP_FILES=()

cleanup() {
	rm -f -- "${TEMP_FILES[@]}"
}

trap 'cleanup'	EXIT

temp_one="$(mktemp -t "$(basename -- "$0").XXXXXX")"
temp_two="$(mktemp -t "$(basename -- "$0").XXXXXX")"

TEMP_FILES+=("$temp_one" "$temp_two")

fix_listing() {
	local \
		list_num="$1"

	(if [ "$IGNORE_BUILT" -ne 0 ]; then
		if [ "$list_num" -eq 1 ]; then
			# ignoring installed files only applies to second diff,
			# from installed packages
			ignore_autogenerated_files
		else
			cat
		fi
	elif [ "$SIMULATE_BUILT" -ne 0 ]; then
		if [ "$list_num" -eq 0 ]; then
			# simulating yet-to-be-generated files only applies to
			# first diff, the listing of files in the package being
			# built
			imagine_autogenerated_files
		else
			cat
		fi
	else
		cat
	fi) |
	(if [ "$FIX_DOCS" -ne 0 ]; then
		strip_docdir_version
	else
		cat
	fi) |
	(if [ "$FIX_SLACKWARE_CRUFT" -ne 0 ]; then
		remove_slackware_cruft
	else
		cat
	fi) |
	(if [ "$list_num" -eq 0 ]; then
		# operating on left
		apply_user_seds "${SED_LEFT[@]}"
	else
		# operating on right
		apply_user_seds "${SED_RIGHT[@]}"
	fi) |
	sort
}

ignore_autogenerated_files() {
	# remove `install/doinst.sh' from the file listing
	local autogen_files=(
		'install/doinst\.sh'
	)

	# (note: the first character of the special shell variable IFS is the
	# character inserted between elements of interpolated arrays)
	egrep -v "^($(IFS='|'; echo "${autogen_files[*]}"))\$"
	# also works:
	#(IFS='|'; egrep -v "^(${autogen_files[*]})\$")
}

imagine_autogenerated_files() {
	# add `install/doinst.sh' if there are symlinks in the build
	# directory
	# (remember, we're chdir-ed to the package directory)
	(if [ ! -f 'install/doinst.sh' ] &&
		[ -n "$(find . -type l |head -1)" ]; then

		echo 'install/doinst.sh'
	fi
	# cat, here, will not hit the above echo, but will assure continued
	# piping 
	cat)

}

remove_slackware_cruft() {
	local sl_h=(
		# (most of these patterns are unnecessary; '^[^/]+:' will match
		# everything)
		#'COMPRESSED PACKAGE_SIZE:'
		#'FILE LIST:'
		#'PACKAGE DESCRIPTION:'
		#'PACKAGE LOCATION:'
		#'PACKAGE NAME:'
		#'UNCOMPRESSED PACKAGE SIZE:'
		'[^/]+:'
	)

	# explanation of weird syntax:
	#
	# IFS='|'	=> Concatenate array elements interpolated into
	#		   double-quoted strings using `|'. IFS is normally set
	#		   to $' \r\n', the first character of which is used to
	#		   concatenate the elements of interpolated arrays.
	#
	# "${sl_h[*]/	=> Inline-concatenate all elements in the local array
	#		   '${sl_h[]}', applying a replacement to each element.
	#
	# /|/\\|}"	=> replace all occurances of the string '|' (because of
	# 		   '/') with '\|'.
	#
	# So, an argument array like ('/usr|thing' 'some_file.h' '/var') gets
	# translated into '(/usr\|thing|some_file.h|/var)'

	egrep -v "^($(IFS='|'; echo "${sl_h[*]//|/\\|}"))"
}

strip_docdir_version() {
	perl -p -e '
	if (m#^(usr/doc/)(.*?)(/.*)$#) {
		my @parts = reverse split /-/, $2;
		$_ = $1 . "[" .
			(join "-", reverse @parts[1 .. $#parts]) .
			"]" . $3 . "\n";
	}'
}

apply_user_seds() {
	if [ "$#" -gt 0 ]; then
		local \
			sed_prog \
			sed_opts
			
		sed_opts=()

		for sed_prog; do
			sed_opts+=('-e' "$sed_prog")
		done

		sed "${sed_opts[@]}"
	else
		cat
	fi
}

# figure out how wide the screen is
COLUMNS="${COLUMNS:-$(stty size |cut -f 2 -d ' ')}"

diff_opts=(
	'--suppress-common-lines'
	'--ignore-blank-lines'
	'--suppress-blank-empty'
	'--report-identical-files'
	"${COLUMNS:+--width=$COLUMNS}"
)

if [ "$PLAIN_DIFF" -eq 0 ]; then
	diff_opts+=('--side-by-side')

	# print out a header to indicate which side of the diff output means
	# what
	if [ -n "$COLUMNS" ]; then
		labels=(
			'*** NEW PACKAGE ***'
			'*** INSTALLED PACKAGE ***'
		)

		labels_fmt=()

		label_side_len="$(((COLUMNS+1)/2-3))"
		for label in "${labels[@]}"; do
			label_length="${#label}"
			labels_fmt+=(
				"$(printf "%-${label_side_len}s" \
					"$(printf \
						"%$(((label_side_len-label_length)/2+label_length))s" \
						"$label")"
				)"
			)
		done
		echo "${labels_fmt[*]}"
#		(IFS='|'; echo "${labels_fmt[*]}")
#		printf '%-'"$(((COLUMNS-COLUMNS%10-8)/2+3))"'s| %s\n' "${labels[@]}"
	else
		# unable to determine screen width
		echo '<< NEW | INSTALLED >>'
	fi
else
	# using a plain diff
	diff_opts+=('--normal')
fi

inst_pkgbase=''
if [ "$AUTOMATIC_PKG" -ne 0 ]; then
	if grep -qP '^\w+:' 'install/slack-desc' 2>/dev/null; then
		inst_pkgbase="$(
			grep -oP '^[\w-]+:' 'install/slack-desc' |
			grep -oP '[\w-]+' |
			head -1
		)-"
	elif [ -d usr/doc ]; then
		inst_pkgbase="$(
			find usr/doc \
				\( \
					-type d \
					-mindepth 1 \
					-maxdepth 1 \
					! -name '.*' \
				\) \
				-exec basename -- {} \; |
			sed -e 's,-[0-9].*$,,' |
			head -1
		)-"
	fi

	if [ -z "$inst_pkgbase" ]; then
		echo 'Unable to automatically determine package base' >&2
		if [ -n "$1" ]; then
			echo "Using \`$1' as package base" >&2
			inst_pkgbase="$1"
		else
			exit 1
		fi
	fi
else # if [ "$AUTOMATIC_PKG" -eq 0 ]
	inst_pkgbase="$*"
fi

find . \
	-type f \
	-print -o \
	\( -type d \( \
		\( -name '.' -exec echo {}/./ \; \) -o \
		-exec echo {}/ \; \
	\) \) |
		cut -c 3- |
		fix_listing '0' >"$temp_one" &&

find "$PACKAGES" \
	-type f \
	-iname "$inst_pkgbase*" |
		sort |
		head -1 |
		xargs cat |
		fix_listing '1' >"$temp_two" &&

diff "${diff_opts[@]}" "$temp_one" "$temp_two" |
	(if [ "$USE_COLORDIFF" -ne 0 -a -t 1 ]; then
		colordiff
	else
		cat
	fi)
