#!/usr/bin/perl -w
use strict;

use Getopt::Std		qw/ getopts /;
use File::Basename	qw/ basename /;
use Text::Wrap		qw/ wrap /;

use constant SLACK_DESC_LINES	=> 11;
use constant RULER_WIDTH	=> 70;

# multi-line entries in the format of `KEY: [VALUE]'
my $REPEATED_PARTS = {
	'Requires'	=> 1,
	'BuildRequires'	=> 1,
	'files'		=> 1,
};

my $LIBDIRS = {
	'x86_64'	=> '/usr/lib64',
	(map {($_, '/usr/lib')} qw/ i386 i486 i586 i686 /),
};

chomp (my $ARCH = `uname -m`);

sub HELP_MESSAGE {
	my $fh = shift;
	print $fh <<EOF
Usage: $0 [OPTIONS] DIRECTORY...
Generate a slack-desc file from an RPM .spec file.

  -v			Print verbose message on STDERR.
  -o FILE		Output slack-required to FILE
  			`-' is a synonym for STDOUT (default).
  -L			Disable limiting slack-desc to 11 lines.
  -R			Disable printing of Volkerding's "handy ruler" at the
			head of the slack-desc.
  -p NUM[-NUM][,NUM[-NUM]]...
			Comma-separated paragraph numbers, or ranges thereof to
			use in the output. First paragraph is considered #0.

By default, scans the current directory. Files not able to be hard-linked are
symlinked by default.
EOF
;
	exit 0;
}

my %opts = (
	'v'	=> 0,
	'L'	=> 0,
	'R'	=> 0,
	'o'	=> '-',
	'p'	=> '',
);

&getopts('vLRo:p:', \%opts);

my %specinfos;

foreach my $specfile (@ARGV) {
	$specinfos{$specfile} = &read_spec_parts($specfile) or next;
	my $slack_desc = &format_slack_desc(@{$specinfos{$specfile}}{qw/ Name Summary description /});
	&output($opts{'o'}, $slack_desc);
}

sub output {
	my ($outfile, $slack_desc_contents) = @_;

	my $out;
	$out = \*STDOUT
		unless defined $outfile and
		length $outfile and
		$outfile ne '-';

	open $out, '>', $outfile
		or die "Cannot open file `$outfile' for writing: $!"
		unless defined $out;

	print STDERR "=== contents of slack-desc ===\n",
		$slack_desc_contents,
		"=== end of slack-desc ===\n"
			if $opts{'v'};

	print $out $slack_desc_contents;
}
#{use Data::Dumper; print STDERR Data::Dumper->Dump([\%specinfos]);}

sub read_spec_parts {
	my $spec = shift;

	open my $specfileh, '<', $spec
		or warn "Cannot open file `$spec' for reading: $!" && return;

	my %spec_parts;
	my %spec_defines = (
		'_includedir'	=> '/usr/include',
		'_libdir'	=> $LIBDIRS->{$ARCH},
		'_mandir'	=> '/usr/man',
		'_bindir'	=> '/usr/bin',
		'_tmppath'	=> '/tmp',
	);

	my $in_section; # holds name of /^%([SECTION])\s*$/
	foreach my $specline (<$specfileh>) {
		chomp $specline;

		# insert defines
		while (my ($key, $def) = each %spec_defines) {
			$specline =~ s/\%(\{${key}\}|${key})/${def}/g;
		}

		if ($specline =~ /^%define\s+(\S+)\s+(.*)$/) {
			$spec_defines{$1} = $2;
		} elsif ($specline =~ /^%(build|changelog|description|files|install|package|prep|post|postun)/) {
			# got section header line
			$in_section = $1;
		} elsif (! defined $in_section) {
			# read line like `Name: [PACKAGE NAME]'
			if ($specline =~ /^(\S+)\s*:\s*(.*)$/) {
				my ($part, $content) = ($1, $2);
				# strip whitespace from the end
				$content =~ s/\s+$//;

				if ($REPEATED_PARTS->{$part}) {
					# it's an entry that exists on multiple
					# lines
					$spec_parts{$part} = []
					unless defined $spec_parts{$part};

					push @{$spec_parts{$part}}, $content;
				} else {
					$spec_parts{$part} = $content;
				}
			}
		} else {
			# reading line of entire section (like `%description')
			$spec_parts{$in_section} = ''
				unless defined $spec_parts{$in_section};
			$spec_parts{$in_section} .= $specline . "\n";
		}
	}

	close $specfileh;

	\%spec_parts
}

sub format_slack_desc {
	my ($name, $summary, $description) = @_;

	print STDERR "=== collated description body === \n" . $description . "===\n"
		if $opts{'v'};

	# eliminate whitespace characters before newlines (also eliminates CRLF
	# file formatting)
	$description =~ s/[ \t\r]+\n/\n/g;

	# split into paragraphs
	my @paragraphs = map { s/\n/ /g; $_ . "\n\n"} split /\n{2,}/, $description;

	# only select wanted paragraphs
	@paragraphs = @paragraphs[(&hr_range_to_indexes($opts{'p'}))]
		if length $opts{'p'};

	# insert slack-desc package name and short description as first
	# paragraph
	unshift @paragraphs, "${name} (${summary})\n\n";

	$Text::Wrap::columns = RULER_WIDTH + 2 + length $name;
	my $wrapped_body = &wrap("${name}: ", "${name}: ", @paragraphs);

	my @body_lines = split /\s*\n/, $wrapped_body;

	unless ($opts{'L'}) {
		if (@body_lines < SLACK_DESC_LINES) {
			push @body_lines, ("${name}:") x (SLACK_DESC_LINES - @body_lines);
		} elsif (@body_lines > SLACK_DESC_LINES) {
			@body_lines = @body_lines[0 .. (SLACK_DESC_LINES - 1)];
		}
	}

	my $final_body = join "\n", @body_lines;
	my $hr_indent = ' ' x length $name;

	my $handy_ruler = "# HOW TO EDIT THIS FILE:
# The \"handy ruler\" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|' on
# the right side marks the last column you can put a character in. You must make
# exactly 11 lines for the formatting to be correct.  It's also customary to
# leave one space after the ':'.

$hr_indent|-----handy-ruler------------------------------------------------------|
";

	($opts{'R'} ? '' : $handy_ruler) . $final_body . "\n";

}

sub hr_range_to_indexes {
	my @ranges = @_;
	my @indexes;

	foreach my $range (@ranges) {
		push @indexes, 
		($range =~ /,/ ?
			&hr_range_to_indexes(split /,/, $range) :
			($range =~ /^(\d+)-+(\d+)$/ ?
				($1 < $2) ?
					$1 .. $2 :
					reverse $2 .. $1 :
				sprintf '%d', $range)
		);
	}

	@indexes
}
