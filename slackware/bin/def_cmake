#!/bin/bash
# vi: et sts=4 sw=4 ts=4

ON='ON'
OFF='OFF'

ARCH=${ARCH:-$(uname -m)}

# default CMake definitions
CMAKE_DEFINES=(
    # Install directory used by install.
    #
    # If "make install" is invoked or INSTALL is built, this directory is
    # pre-pended onto all install directories. This variable defaults to
    # /usr/local on UNIX and c:/Program Files on Windows.
    CMAKE_INSTALL_PREFIX='/usr'
    CMAKE_INSTALL_MANDIR='/usr/man'
    CMAKE_INSTALL_INFODIR='/usr/info'

    # Global flag to cause add_library to create shared libraries if on.
    #
    # If present and true, this will cause all libraries to be built shared
    # unless the library was explicitly added as a static library. This
    # variable is often added to projects as an OPTION so that each user of
    # a project can decide if they want to build the project using shared
    # or static libraries.
    BUILD_SHARED_LIBS="$ON"

    # Linker flags used to create executables.
    #
    # Flags used by the linker when creating an executable.
    CMAKE_EXE_LINKER_FLAGS='-s' # strip

    # The generator used to build the project.
    #
    # The name of the generator that is being used to generate the build
    # files. (e.g. "Unix Makefiles", "Visual Studio 6", etc.)
    CMAKE_GENERATOR='Unix Makefiles'

    # Create verbose makefiles if on.
    #
    # This variable defaults to false. You can set this variable to true to
    # make CMake produce verbose makefiles that show each command line as
    # it is used.
    CMAKE_VERBOSE_MAKEFILE="$OFF"

    # Enables color output when using the Makefile generator.
    #
    # When enabled, the generated Makefiles will produce colored output.
    # Default is ON.
    CMAKE_COLOR_MAKEFILE="$ON"

    # Specifies the build type for make based generators.
    #
    # This specifies what build type will be built in this tree. Possible
    # values are empty, Debug, Release, RelWithDebInfo and MinSizeRel. This
    # variable is only supported for make based generators. If this
    # variable is supported, then CMake will also provide initial values
    # for the variables with the name
    # CMAKE_C_FLAGS_[Debug|Release|RelWithDebInfo|MinSizeRel]. For example,
    # if CMAKE_BUILD_TYPE is Debug, then CMAKE_C_FLAGS_DEBUG will be added
    # to the CMAKE_C_FLAGS.
    CMAKE_BUILD_TYPE='Release'

    #CMAKE_INSTALL_SO_NO_EXE=$OFF
)

# x86_64 support
if [[ $ARCH = 'x86_64' ]]; then
    CMAKE_DEFINES+=(
        # Additional flags to use when compiling this target's sources.
        #
        # The COMPILE_FLAGS property sets additional compiler flags
        # used to build sources within the target. Use
        # COMPILE_DEFINITIONS to pass additional preprocessor
        # definitions.
        #COMPILE_FLAGS='-fPIC -DPIC'

        # Set the libdir
        LIB_SUFFIX=64
        # addendum: this can lead to confusion re: lib64 => lib6464
        #CMAKE_INSTALL_LIBDIR='/usr/lib64'
    )
#else
#   CMAKE_DEFINES+=(
#       # Set the libdir
#       LIB_SUFFIX=
#       CMAKE_INSTALL_LIBDIR='/usr/lib'
#   )
fi

CMAKE_ARGS=()

for DEF in "${CMAKE_DEFINES[@]}"; do
    if [[ $DEF != *=* ]]; then
        # add `=1' for a defined value
        DEF=${DEF//=}=$ON
    fi
    CMAKE_ARGS+=("-D${DEF#-D}")
done

# clean up previous cmake calls
rm -f -- CMakeCache.txt

exec cmake "${CMAKE_ARGS[@]}" "$@"
