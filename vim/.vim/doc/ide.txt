*ide.txt*   An Interface Development Environment for VIM, aka: *ide* 
	    Author:      Daniel Gomez-Prado (http://dgomezpr.com)
	    Last change: Dec   18, 2012 10:48 PM EST. version 0.44
	    			 March 19, 2011 10:57 AM EST. version 0.43
	    Note:        Based on the project plugin by Aric Blumer


                        IDE REFERENCE MANUAL ~

0. Credits                                                       |ide-credits| 
1. History                                                       |ide-history|
2. Notations                                                   |ide-notations|
3. Changes w.r.t the|project|plugin                              |ide-changes|
4. Installation                                             |ide-installation|
   4.1. Plugin integration                                   |ide-integration|       
   4.2. vimrc example                                      |ide-vimrc-example|       
5. Quick Guide                                                     |ide-guide|
6. Mappings                                                     |ide-mappings|
   6.1. Local mappings [*]                                |ide-local-mappings|
   6.1. Global mappings                                  |ide-global-mappings|
   6.1. File mappings                                      |ide-file-mappings|
7. Settings                                                     |ide-settings|
   7.1. New settings                                        |ide-new-settings|
   7.1. Project settings [*]                            |ide-project-settings|
8. Project plugin reference [*]                              |ide-project-doc|
   8.1. Ide project syntax                                |ide-project-syntax|
   8.2. Inheritance                                  |ide-project-inheritance|
   8.3. Example                                          |ide-project-example|
9. Debugging                                                   |ide-debugging|
10.Todo list                                                        |ide-todo|
11.Open bugs                                                         |ide-bug|

Notes:
+ This plugin is only available if Vim was compiled with the|+signs|feature and
  'compatible' is not set.
+ Documentation on sections marked [*] are verbatim copies of the documentation
  provided by the project plugin

==============================================================================
CREDITS                                                           *ide-credits*

The ide.vim plugin is based on the famous project.vim plugin developed by
Aric Blumer (aricvim at charter dot net) version 1.4.1, last changed on
Fri 13 Oct 2006 09:47:08 AM EDT.

The ide.vim plugin uses code snippets borrowed from many other plugins as
well. Among those plugins are|showmarks||taglist||bufexplorer||echofunc|and
source explorer scripts. That is by no means a complete list, if you feel
that I have used your plugin (and I have probably used it) please let met 
know so I can add it to the credit list.


==============================================================================
HISTORY                                                           *ide-history*

After using the|project|plugin for quite some time, there were several minor
things that I started changing because I was used to working with TABs on
Visual Studio. At first, I tried to keep my code separated from the original
|project|plugin code, but over time, as my code grew larger and the|project|
plugin sat still I end up merging both into one plugin to avoid replication.

This|ide|plugin thus contains a re-write of the plugin|project|(1.3k) plus
my additional|ide|code (2.5k). The re-write was needed because instead of 
loading a project file into a file buffer, the|ide|plugin loads an index of
all project files into a hash and displays it on the dedicated buffer, this 
allows for integration with other plugins that I do use such as the source
explorer plugin. There is a powerful feature in the original project plugin
(script loading at file or project open) that I have never really used.
I have ported this feature but I have never tested it.

I do not expect you will agree with all changes, but I hope that some time in
the future someone else also motivated by "personal taste" will end up taking
over this code, improve it and then pass it on, till the time we get a true
IDE on top of vim.

Now that I look back to this plugin, I think it would have been probably easier
to implement it on VIM itselft.


==============================================================================
NOTATIONS                                                       *ide-notations*

In what follows, let's adhere to the following notations:

 - The plugins project and ide are denoted by|project|and |ide|respectively
 - The word ide without decorations refers to a running instance of the|ide|  
 - The word project-file refers to the file containing the information used by
   the ide to load the list of files to manage. 
 - The word ide-project refers to a project-file loaded into the ide.
 - The word sub-project refers to any group of files group under brackets in
   the project-file. A sub-project might contain any number of files or 
   sub-projects. See the|ide-project-syntax|
 - The word project_entry refers to the first line of a sub-project.
 - The word project without decorations refers to the first project_entry in
   the project-file. 


==============================================================================
CHANGES WITH RESPECT TO THE PROJECT PLUGIN                        *ide-changes*

I have tried to maintain the same functionality of the original|project|plugin,
that is, almost all its commands, settings, and flags are still valid. If you
have already used the|project|plugin then its migration to the|ide|plugin will
be transparent.

The main changes, upgrades and extensions that the|ide|plugin has with respect
to the|project|plugin are:

  Better visualization ~
   - The ide window follows any tab movement provinding a persistant panel ide.
   - Keeps track of all files opened, edited and closed using icons. Pending
     tracking updates are refreshed as soon as the ide window is entered so
     you can visualize the status of your project.
   - No more multiple windows for the same buffer. Opening a file which is 
     already open won't create another window but will jump to the correct 
     tab and window.   
   - Cursor movement within the ide windows seems as a file or project select.
   - Windows width can be adjusted and re-adjusted.
   - Tabs provide information on mouse hover

  More Friendly ~
  - Closing a project unloads all its working variables, so its safe to invoke 
    the|ide|again. Or open a new project and let to the|ide|unload the current
    one.
  - Help can be lauch from within the ide window by pressing <F1>
  - All key-bindings can be customized in the|vimrc|file to another mapping.    
  - Information on some key processes are provided on the command line
  - Errors on bad usage are notified  
  
  Syntax Highlight ~
  - Create syntax files for the project-file
  - Syntax file for the project are generated and loaded for the files on open
  - Highlights are automatically or manually updated through|IDESyntax|command.
  - Highlights are refreshed on idle intervals, so your idle times are no
    longer wasted.

  Other Plugin interactions ~
  - Can be registered to other plugins
  - Have built in workarounds for some plugins that I use as part of my 'ide':
    |showmarks||taglist||sourc-explorer||ex-global-search|

  Tracing, Logging and Debugging Support ~
  - Logs with detailed information of traces can be generated, see|IDEShowlog|
  - All internal variables can be exposed through the command|IDEShowenv|
  - Easier than ever to debug the plugin so you can modify it and improve it.
    
  OverHauling ~
  - The core of the|project|plugin was re-writen to be loaded in a dedicated
    buffer named __IDE_Project__. The project-file is read on loading the|ide|
    and then closed, all the files contained are indexed and store in a map.
  - Having the information in a map renders continuos parsing of the
    project-file unnecessary, and fascilitates the development of extensions.
  - Make a project or a sub-project, with the key binding you wish.      


==============================================================================
INSTALLATION                                                 *ide-installation*

To install (see|add-global-plugin|):
  + Download the ide.zip plugin and extract it into your runtime directory.
  + The archive contains the following files:
    - plugin/ide.vim         the|ide|plugin
    - plugin/ideSyntax.pl    perl script to generate syntax for c/c++
    - doc/ide.txt.           this help
    - icon/ideOpen.png       icon file to track open files
    - icon/ideClose.png      icon file to track closed files
    - icon/ideEdit.png       icon file to track edited files
    - icon/ideReadOnly.png   icon file to track read-only open files
    - ide.sh                 Optional bash script to generate project-files
  + Update your help within vim by executing:
>
      :helptag <your runtime directory/doc>
<
    This will generate all the help tags for any file located in the doc
    directory.

You can also place the bash script ide.sh in your bin path, and create a link
to it with 'ln -s ide.sh ide'. Afterwards you can use 'ide' as a shell command
to automatically generate or retrieve project-files from your current path. 
Follow the above instructions and type 'ide -h' for more information.

------------------------------------------------------------------------------
INTEGRATION WITH OTHER PLUGINS                                *ide-integration*

The |ide|plugin can be integrated and cohexist with other plugins. The reserved
buffer name for the ide plugin is *__IDE_Project__* and it can be passed to other
plugin managers to avoid competition when rendering windows. 

For example, to integrate the ide plugin with the source explorer plugin write
the following line in your .vimrc file
>
	let g:SrcExpl_pluginList = [
	\ "__Tag_List__",
	\ "__IDE_Project__",
	\ "_NERD_tree_",
	\ "BufExplorer",
	\ "Source_Explorer"
	\ ]
<
------------------------------------------------------------------------------
VIMRC EXAMPLE                                               *ide-vimrc-example*

There are many global variables and settings that can be used to customize the
|ide|plugin, the most common to be place in the .vimrc file are:
>
	let g:IDE_AdvancedFlags 	= "fMOSTw"
	let g:IDE_ProjectFlags 		= "FgimsSt"
	let g:IDE_IconFolder 		= "~/.vim/icons"
	let g:IDE_WindowIncrement 	= 50
	let g:IDE_MapProjectToggle 	= '<F12>'
	let g:IDE_MapMove2RightTab 	= '<C-Right>'
	let g:IDE_MapMove2LeftTab 	= '<C-Left>'
	let g:IDE_MapMakeMainTarget_1 	= '<F7>r'
	let g:IDE_MapMakeMainTarget_2 	= '<F7>d'
	let g:IDE_MapMakeMainTarget_3 	= '<F7>c'
	let g:IDE_MapMakeThisTarget_1 	= '<C-F7>r'
	let g:IDE_MapMakeThisTarget_2 	= '<C-F7>d'
	let g:IDE_MapMakeThisTarget_3 	= '<C-F7>c'
<

==============================================================================
QUICK GUIDE                                                         *ide-guide*

To load a project-file into vim, simply type within the vim command:
>
 :IDE <project-file>
<
To open vim from your shell and load a project-file, type:
>
 $> gvim -c "IDE <project-file>"
<
Whitin vim all the|ide|commands can be traversed by typing:
>
 :ide<TAB>
<
use:
>
*IDE* <project-file>     Starts the ide or loads a new project-file
*IDEExit[!]*             Stops the ide and unloads its ide-project
*IDESave*                Save changes made in the ide into the project-file 
*IDEClose*               Hides the ide window
*IDEOpen*                Opens the ide window
*IDEToggle*              Toggles the ide window on/off (<F12>)
*IDELogon*               Starts logging ide operations
*IDELogoff*              Stops logging ide operations
*IDEShowlog*             Displays the log
*IDEShowenv*             Shows the ide and ide-project internal variables
*IDESyntax[!]*           Refreshes the syntax file used by the ide. The [!]
                         updates the local copy of the ideSyntax.pl script 

Additionally, there are other shortucts that can be customized and they can
be shown in the|ide|window by pressing <F1>:

|ide-local-mappings|
 <enter>        : Open/Close project fold. Open file. Jump to file. See|g:IDE_DefaultOpenMethod|
 <space>        : Increase/Decrease IDE window. See|g:IDE_WindowIncrement|
 <C-up>         : Move up the file/project under the cursor
 <C-down>       : Move down the file/project under the cursor
 +/-            : Open/Close a fold
 */=            : Open/Close all folds
 dd             : Deletes a file or project
 q              : Close the IDE window
 <F1>           : Remove help text
 <F2>           : Save project 'projectname' 
 <S-F2>         : Save project 'projectname' and Exit
 <C-F2>         : Exit project
 <LocalLeader>i : Show information for the current file/project. See|g:IDE_Info|
 <LocalLeader>I : Show detailed information. See|g:IDE_InfoDetailed|
 <LocalLeader>l : Load all files in the current project. See|g:IDE_LoadAll|
 <LocalLeader>L : As above but include all sub-projects. See|g:IDE_LoadAllRecursive| 
 <LocalLeader>w : Wipe all files in the current project. See|g:IDE_WipeAll| 
 <LocalLeader>W : As above but include all sub-projects. See|g:IDE_WipeAllRecursive| 
 <LocalLeader>g : Greps all files in the current project. See|g:IDE_GrepAll|
 <LocalLeader>G : As above but include all sub-projects. See|g:IDE_GrepAllRecursive|
 <LocalLeader>c : Create a project. See|g:IDE_Create|
 <LocalLeader>C : Create a project and its sub-projects. See|g:IDE_CreateRecursive|
 <LocalLeader>r : Refresh the content of a project from its directory. See|g:IDE_RefreshContent|
 <LocalLeader>R : As above but include all sub-projects. See|g:IDE_RefreshContentRecursive|
 <LocalLeader>s : Sort the content of a project. See|g:IDE_SortContent|
 <LocalLeader>S : As above but include all sub-projects. See|g:IDE_SortContentRecursive|

|ide-file-mappings|
 <Leader>f      : Fetch the word under the cursor in the current sub-project. See|g:IDE_FetchInProjectRecursive|
 <Leader>F      : Fetch the word under the cursor across all sub-projects See|g:IDE_FetchInAllProjects|

|ide-global-mappings|
 <F7>r          : Make 'projectname' project. See|g:IDE_MapMakeMainTarget_1| 
 <F7>d          : Make 'projectname' project debug. See|g:IDE_MapMakeMainTarget_2|
 <F7>c          : Make 'projectname' project clean. See|g:IDE_MapMakeMainTarget_3|
 <C-F7>r        : Make current sub-project. See|g:IDE_MapMakeThisTarget_1| 
 <C-F7>d        : Make current sub-project debug. See|g:IDE_MapMakeThisTarget_2|
 <C-F7>c        : Make current sub-project clean. See|g:IDE_MapMakeThisTarget_3|
 <F12>          : Toggle IDE window. See|g:IDE_MapProjectToggle|
 <C-Right>      : Move to the right tab. See|g:IDE_MapMove2RightTab|
 <C-Left>       : Move to the left tab. See|g:IDE_MapMove2LeftTab|


==============================================================================
MAPPINGS                                                         *ide-mappings*

The following variables are used to customize the|ide|shortcut mappings.

------------------------------------------------------------------------------
LOCAL MAPPINGS                                             *ide-local-mappings*

Local mappings refer to shortcuts only accessable from within the|ide|buffer,
that is, the cursor has to be located within the|ide|buffer and window for 
the shortcuts to work. All of these mappings are hardcoded in the|project|
plugin and are exposed here as configurable mappings. The actions defined in 
this section are a copy paste of the actions explained in the|project-mappings|
documentation. 

*g:IDE_Info* Default is '<LocalLeader>i'
	This functionality is by default achieved by moving the mouse in the
	ide window. It prints the full path of the file or sub-project the
	cursor is at. It also provides information whether a file exists or not.
	The mapping is for compatibility with the|project|plugin. 

*g:IDE_InfoDetailed* Default is '<LocalLeader>I'
	In addition to the full path information provided by|g:IDE_Info|this
	prints the number of files a sub-project contains, or the sub-project
	name a file belongs to.

*g:IDE_LoadAll* Default is '<LocalLeader>l'
	Load all the files in the current sub-project level into Vim. 
	While files are being loaded, you may press any key to stop.

*g:IDE_LoadAllRecursive* Default is '<LocalLeader>L'
	Load all the files in the current sub-projects and any other sub-project
	contained by ints level into Vim.  Use this mapping with caution in 
	project-files containing thousands of files. Both the|project|and the
	|ide|plugins have been tested with +5k files. While files are being loaded,
	you may press any key to stop.

*g:IDE_WipeAll* Default is '<LocalLeader>w'
	Wipe all the files in the current sub-project level from Vim. If files
	are modified, they will 'not' be closed. This 'differs' from the|project|
	plugin that saves edited files by default. While files are being wiped,
	you may press any key to stop.

*g:IDE_WipeAllRecursive* Default is '<LocalLeader>W'
	Wipe all the files in the current sub-project and all contained sub-projects
	from Vim. If files are modified, they will 'not' be closed. This 'differs'
	from the|project|plugin that saves edited files by default. While files are
	being wiped, you may press any key to stop.

*g:IDE_GrepAll* Default is '<LocalLeader>g'
	Grep all the files in the current sub-project level.

*g:IDE_GrepAllRecursive* Default is '<LocalLeader>G'
	Grep all the files in the current sub-project level and all contained
	sub-projects.

*g:IDE_Create* Default is '<LocalLeader>c'
	Creates a project_entry.  It asks for the description, the path
	to the files, the CD parameter, and the filename |glob()| pattern.
	From this information, it will create the project_entry below the
	cursor.

*g:IDE_CreateRecursive* Default is '<LocalLeader>C'
	Creates a project_entry similar to the|g:IDE_Create|mapping but recursively 
	includes all the subdirectories.

*g:IDE_RefreshContent* Default is '<LocalLeader>r'
	Refreshes the project_entry that the cursor is in by placing in the
	fold all the files that match the filter. The project is refreshed
	using an indent of one space for every foldlevel in the hierarchy.

	You may place a "# pragma keep" (without the quotes) at the end of a
	line, and the file entry on that line will not be removed when you
	refresh.  This is useful, for example, when you have . as an entry so
	you can easily browse the directory.

	This does not work for projects using |netrw|.
	
*g:IDE_RefreshContentRecursive* Default is '<LocalLeader>R'
	Executes the mapping |g:IDE_RefreshContent|recursively in the current fold
	and all folds below. This does not work for Projects using|netrw|.

*g:IDE_SortContent* Default is '<LocalLeader>s'
	Sorts the files by name in a sub-project.

*g:IDE_SortContentRecursive* Default is '<LocalLeader>S'
	Sorts the files by name in a sub-project recursively.

Other local mappings present on the|project|plugin which have not been added
configurable capabilities on the the|ide|plugin are:

Map	Action ~
\1-\9	Run the command specified in g:proj_run{x} where {x} is the number
	of the key. See|g:proj_run0|
\f1-\f9 Run the command specified in g:proj_run_fold{x} where {x} is the
	number of the key. The command is run on the files at the current
	project level. 
\F1-\F9	Run the command specified in g:proj_run_fold{x} where {x} is the
	number of the key.  The command is run on the files at the current
	Project level and all sub-projects. See|g:proj_run_fold0|
\0	Display the commands that are defined for \1 through \9.
\f0	Display the commands that are defined for \f1 through \f9 and \F1
	through \F0.  Same as \F0.

------------------------------------------------------------------------------
GLOBAL MAPPINGS                                           *ide-global-mappings*

Global mappings refer to shortcuts accessable from any buffer.

*g:IDE_MapMove2RightTab* Default is '<C-Right>' 
	Defines the key binding to move to the right tab. It requires the T option 
	on the|ide-flags|

*g:IDE_MapMove2LeftTab* Default is '<C-Left>'
	Defines the key binding to move to the left tab. It requires the T option 
	on the|ide-flags|

*g:IDE_MapProjectToggle* Default is '<F12>'
	Defines the key binding to toggle the ide window open and closed. It
	requires the g option of the|ide-project-flags|

*g:IDE_MapMakeMainTarget_1* Default is '<F7>r'
	Defines the key binding to make the project with the target defined by
	|g:IDE_MainTarget_1|This by default behaves as a make release in the
	entire project tree.

*g:IDE_MapMakeMainTarget_2* Default is '<F7>d'
	Defines the key binding to make the project with the target defined by
	|g:IDE_MainTarget_2|This by default behaves as a make debug in the
	entire project tree.

*g:IDE_MapMakeMainTarget_3* Default is '<F7>c'
	Defines the key binding to make the project with the target defined by
	|g:IDE_MainTarget_3|This by default behaves as a make clean in the
	entire project tree.

*g:IDE_MapMakeThisTarget_1* Default is '<C-F7>r'
	Defines the key binding to make the current sub-project with the target
	defined by|g:IDE_ThisTarget_1|The current sub-project is defined as the
	the sub-project owning the file under the cursor in the ide window.
	This holds true even if we have the ide window toggled off.

*g:IDE_MapMakeThisTarget_2* Default is '<C-F7>d'
	Defines the key binding to make the current sub-project with the target
	defined by|g:IDE_ThisTarget_2|The current sub-project is defined as the
	the sub-project owning the file under the cursor in the ide window.
	This holds true even if we have the ide window toggled off.

*g:IDE_MapMakeThisTarget_3* Default is '<C-F7>c'
	Defines the key binding to make the current sub-project with the target
	defined by|g:IDE_ThisTarget_3|The current sub-project is defined as the
	the sub-project owning the file under the cursor in the ide window.
	This holds true even if we have the ide window toggled off.

*g:IDE_MainTarget_1* Default is ''
	It reverts to the default target provided by the makefile.

*g:IDE_MainTarget_2* Default is 'debug'
	It sets the target to debug.

*g:IDE_MainTarget_3* Default is 'clean'
	It sets the target to clean

*g:IDE_ThisTarget_1* Default is ''
	It reverts to the default target provided by the makefile.

*g:IDE_ThisTarget_2* Default is 'debug'
	It sets the target to debug.

*g:IDE_ThisTarget_3* Default is 'clean'
	It sets the target to clean

*g:IDE_MakefileList* Default is ["makefile","Makefile"]
	Defines the list of makefile names to look at each sub-project path
	or at the entire project path. This paths are defined by the path
	of each project_entry.

------------------------------------------------------------------------------
FILE MAPPINGS                                               *ide-file-mappings*

File mappings refer to shortcuts only accessable when the cursor is on a
buffer file which is listed as a file in your project-file.

*g:IDE_FetchInProjectRecursive* Default is '<Leader>f'
	Grep all files in a sub-project. The sub-project is inferred from
	the file from which this command is invoked.

*g:IDE_FetchInAllProjects* Default is '<Leader>F'
	Grep all files in a sub-project recursively. The sub-project is 
	inferred from the file from which this command is invoked.



==============================================================================
SETTINGS                                                         *ide-settings*
                                                             *ide-new-settings*
Two global variables|g:IDE_AdvancedFlags|and |g:IDE_ProjectFlags|are used to
enable and disable specific behavior in the|ide|plugin.

*g:IDE_AdvancedFlags* = " +fCDMoORSTu"                              *ide-flags*       
	This flag is given by the variable|g:IDE_AdvancedFlags|and by default
	is:
	        linux:  let g:IDE_AdvancedFlags = "fMOST"
        	win:    let g:IDE_AdvancedFlags = ""       
	
	The meaning for each of this characters is:

       flag	Description ~

	+	When present, a tree structure composed of + and | is added to
		the left of the ide-project, to help visualize its hierarchy. 
	f	When present, the ide-window will gain focus when toggled on.
	C   When present, a refresh or sort of the files in a sub-project 
		will be case sensitive ordered. When absent, the file ordering
		will ignore cases.
	D 	When present and vim has been compiled with|digraphs|cute
		symbols	will be used whenever possible. Please note, that this
		beautification might bring some weird symbols in some systems.
	M   When present, the|global-mappings|related to make are enabled.
	o   When present, Sign marks (text or icons) will be used to track
		the status of each file in the project. The tracking status 
		enabled by this flag are [R,E,RO]. For the icons to work, vim
		must have been compiled with|+signs|which is the default in 
		gvim, and the variable|g:IDE_Icons|must have been set to the
		folder containing these icons (provided with the|ide|plugin).

		text   png-icon    description~
		[R]    ideOpen     File has been open but was not modified.
		[E]    ideEdit     File is open and it has been modified.
		[RO]   ideReadOnly File was open as a non modifiable.
		[O]    ideClose    File was open but it is closed now.

	O 	When present, the ide tracks the file status [R,E,RO,O].
	R 	When present, the ide will be located at the right of the
		window. When absent the ide will be located at the left.
	T 	When present, the key mappings|g:IDE_MapMove2RightTab|and 
		|g:IDE_MapMove2LeftTab|for tab traversal are enabled. This
		requires vim version 700 or later.
	u 	When present, winmanager plugin will be updated always.
		This has never been tested
	z   When present, only the sub-project were the cursor is
	    located within the ide window is left open.

*g:IDE_Divider* Default is '■■■■' when it has digraph otherwise '%%%%'
	This 4 character string defines the look of the line separating
	the embedded help and the beginning of the project file.

*g:IDE_SyntaxScript* Default is 'ideSyntax.pl'
	The name of the perl script containing the rules to generate the 
	syntax highlight for the ide-project

*g:IDE_IconFolder* Default is '~/.vim/icons'
	The folder containing the icons to be used by|+sign|while tracking
	file status on the|ide|. You can place the icons provided in a
	different location, or you can create your own icons and set this
	variable to your icons folder. The names of the icons must be:

	- ideOpen.png
	- ideClose.png
	- ideEdit.png
	- ideReadOnly.png

*g:IDE_UpdateSyntaxAt* Default is '10%'
	It sets the minimum number of files that need to be modified (as a 
	percentage or as a given number) for the syntax highlight to be
	refreshed automatically. 

	NOTE: The correct amount is usage and project-file dependent. If 
	you tend to save a file after every 5 lines of code then a high 
	value is best, otherwise a small value might work best. Similarly
	if you work with huge project-files (+1k files) or big files (+1M)
	it is better to have a high value, otherwise a small value might
	work best. Remember that refreshing syntax highlight will execute 
	a shell script, generate ctags, and recolor the files.

*g:IDE_DefaultOpenMethod* Default is 'tabe'
	It is the default vim action to do when pressing <Enter> on a file 
	listed in the project-file. In vim versions 700 or later the default
	is 'tabe'|:tabe| in earlier versions it is 'sp'|:sp|

*g:IDE_ShiftOpenMethod* Default is 'sp'
	It is the default vim action to do when pressing <S-Enter> on a file
	listed in the project-file. 

------------------------------------------------------------------------------
PROJECT SETTINGS                                         *ide-project-settings*

The following settings correspond to the original settings found in the~
project plugin documentation. The following explanation is a verbatim~
copy of the setting documentation provided in the project plugin~

*g:IDE_ProjectFlags*  = "bcFgilLmnsStTv"                    *ide-project-flags*  
	This flag is given by the variable|g:IDE_ProjectFlags|and corresponds
	to the variable g:proj_flags defined in the|project|plugin. This 
	variable contains a sequence of characters, each with a specific 
	meaning. The default value of this flag is:

	        linux:  let g:IDE_ProjectFlags = "gimsSt"
        	win:    let g:IDE_ProjectFlags = "gimst"       

       flag	Description ~

	b	When present, use the |browse()| when selecting directories
		for \c and \C.  This is off by default for Windows, because
		the windows browser does not allow you to select directories.
	c	When present, the ide Window will automatically close when
		you select a file.
	F       **DEPRECATED**
	g	When present, the mapping defined in|g:IDE_MapProjectToggle|
		(default is <F12> for compatibility) is created to toggle
		the ide Window open and closed.
	i	When present, display the filename and the current working
		directory in the command line when a file is selected for
		opening.
	l	**DEPRECATED**
	L	Similar to l, but install a BufEnter/Leave|:autocommand|to
		ensure that the current working directory is changed to the
		one specified in the fold CD specification whenever that
		buffer is active. (|:lcd|only changes the CWD for a window,
		not a buffer.)
	m	**DEPRECATED**
	n	When present, numbers will be turned on for the ide window.
	s	When present, the ide window will have syntax highlighting.
	S	Turn on sorting for refresh and create.
	t	When present, toggle the size of the window rather than just
		increase the size when pressing <LeftMouse> or the key
		defined in|g:IDE_WindowIncrement|(default is <space>) 
	T	When present, put sub-project folds at the top of the fold
		when refreshing.
	v	When present, use :vimgrep rather than :grep when using \G.

*g:IDE_WindowWidth* Default is 24
	This correspond to the variable g:proj_window in the|project|plugin
	and this variable sets the width of the|ide|plugin.

	Sometimes other plugins such as|taglist|resize the|ide|width. If this
	happens do the following acctions:
	- Toggle the ide open.
	- Enter the ide window.
	- With the mouse resize the ide window to the desired width.
	- Click in any window other than the ide window to set this new width
	  for the ide window.

*g:IDE_WindowIncrement* Default is 50
	This correspond to the variable g:proj_window_increment in the|project|
	plugin and this variable sets the increment size of the ide window
	when pressing <space> or clicking the <LeftMouse>

*g:proj_run1* ...  *g:proj_run9* (from|project|documentation)
	Contains a Vim command to execute on the file.  See the
	mappings of \1 to \9 above.
		
	  %f is replaced with the full path and filename
	  %F is replaced with the full path and filename with spaces
	     quoted
	  %n is replaced with the filename alone
	  %N is replaced with the filename alone with spaces quoted
	  %h is replaced with the home directory
	  %H is replaced with the home directory with spaces quoted
	  %r is replaced with the directory relative to the CD path
	  %R is replaced with the directory relative to the CD path
	     with spaces quoted
	  %d is replaced with the CD directory.
	  %D is replaced with the CD directory.with spaces quoted
	  %% is replaced with a single % that is not used in
	     expansion.

	(Deprecated: %s is also replaced with the full path and
	filename for backward compatibility.)

	For example, gvim will be launched on the file under the
	cursor when you enter \3 if the following is in your vimrc
	file: >
	 let g:proj_run3='silent !gvim %f'
<	Here are a few other examples: >
	 let g:proj_run1='!p4 edit %f'
	 let g:proj_run2='!p4 add %f'
	 let g:proj_run4="echo 'Viewing %f'|sil !xterm -e less %f &"
<
	On Windows systems you will want to put the %f, %h, and %d in
	single quotes to avoid \ escaping.

*g:proj_run_fold1* ...  *g:proj_run_fold9* (from|project|documentation) 
	Contains a Vim command to execute on the files in a fold.  See
	the mappings of \f1 to \f9  and \F1 to \F9 above.
		
	%f is the filename, %h is replaced with the project home
	directory, and %d is replaced with the CD directory.  Multiple
	filenames can be handled in two ways:

	The first (default) way is to have %f replaced with all the
	absolute filenames, and the command is run once.  The second
	is to have the command run for each of the non-absolute
	filenames (%f is replaced with one filename at a time).  To
	select the second behavior, put an '*' character at the
	beginning of the g:proj_run_fold{x} variable.  (The '*' is
	stripped before the command is run.)

	For example, note the difference between the following: >
	 let g:proj_run_fold3="*echo '%h/%f'"
	 let g:proj_run_fold4="echo '%f'"
<
	Note that on Windows systems, you will want the %f, %h, and %c
	within single quotes, or the \ in the paths will cause
	problems.  The alternative is to put them in |escape()|.


==============================================================================
PROJECT PLUGIN REFERENCE		   		      *ide-project-doc*

The content of this section is a copy paste of the documentation provided at~
|project-syntax|

Each Project Entry has this form:

project_entry ::=
    <Description>={projpath} [{options}] {
	[ filename ]
	[ project_entry ]
    }

{options} is one or more of the following (on the same line):
    CD={path}
    in={filename}
    out={filename}
    filter="{pat}"
    flags={flag}


NOTE: Because the plugin uses standard Vim folds, you can use any of the
|fold-commands|. You can double-click on the first line of a fold to open and
close it. You can select a file to open by putting the cursor on its name and
pressing <Return> or by double-clicking on it. 

Note: that a project_entry can reside within a project_entry. This allows you
to set up a hierarchy within your Project.

The <Description> will be displayed in the foldtext and cannot contain "=".
There can be no space character directly on either side of the =.

The {projpath} is the path in which the files listed in the Project's fold
will be found, and it may contain environment variables.  If the path is a
relative path, then the plugin constructs the whole path from the Project's
parent, grandparent, etc., all the way up the hierarchy. An outermost
project_entry must have an absolute path.  See the|ide-project-inheritance|
example below. {projpath} may contain spaces, but they must be escaped like
normal Vim escapes. Here are two examples of the same directory:
>
	Example=/my/directory/with\ spaces {
	}
	Example="/my/directory/with spaces" {
	}

I recommend this for Windows®: >

	Example="c:\My Documents" {
	}

But Vim is smart enough to do this, too: >

	Example=c:\My\ Documents {
	}

CD= provides the directory that Vim will change to when you select a file in
that fold (using |:cd|). This allows you, for example, to enter |:make| to use
the local Makefile.  A CD=. means that Vim will make {projpath} or its
inherited equivalent the current working directory.  When CD is omitted, the
directory is not changed.  There can be no space on either side of the =.  The
value of CD can also be a relative path from a parent's CD.  See the
|ide-project-inheritance| example below.  This directive is ignored for|netrw|
projects. Spaces are allowed in the path as for {projpath}.

in= and out= provide the means to run arbitrary Vim scripts whenever you enter
or leave a file's buffer (see the |BufEnter| and |BufLeave| autocommand
events).  The idea is to have a Vim script that sets up or tears down the
environment for the Project like this:

in.vim: >
	let $PROJECT_HOME='~/my_project'
	" Put the compiler in $PATH
	if $PATH !~ '/path/to/my/compiler'
		let $PATH=$PATH.':/path/to/my/compiler'
	endif

out.vim: >
	" Remove compiler from $PATH
	if $PATH =~ '/path/to/my/compiler'
		let $PATH=substitute($PATH, ':/path/to/my/compiler', '', 'g')
	endif

Then you can use :make with the proper environment depending on what file you
are currently editing.  If the path to the script is relative, then it is
relative from {projpath}.  These directives are inherited by Subprojects
unless the Subproject specifies its own. For use with |netrw| projects, the
paths specified for in= and out= must be absolute and local.

filter= specifies a |glob()| file pattern. It is used to regenerate the list
of files in a Project fold when using the \r (<LocalLeader>r) map in the
Project Window.  The filter value must be in quotes because it can contain
multiple file patterns.  If filter is omitted, then the * pattern is used.
There can be no space on either side of the =.  A Subproject will inherit the
filter of its parent unless it specifies its own filter.

flags= provides the means to enable/disable features for a particular fold.
The general mnemonic scheme is for lower case to turn something off and upper
case to turn something on.  {flag} can contain any of the following
characters:

      flag      Description ~

	l	Turn off recursion for this fold for |g:IDE_LoadAllRecursive|.
		Sub-projects are also blocked from the recursion.
	r	Turn off refresh. When present, do not refresh this fold when
		|g:IDE_RefreshContent|or |g:IDE_RefreshContentRecursive|is used. 
		This does not affect sub-project recursion.
	S	Turn on sorting for refresh and create.
	s	Turn off sorting for refresh and create.
	T	Turn on top gravity.  Forces folds to the top of the current
		fold when refreshing. It has the same affect as the 'T' flag
		in |project-flags|but controls the feature on a per-fold basis.
	t	Turn off top gravity.  Forces folds to the bottom of the
	        current fold when refreshing.
	w	Turn off recursion for this fold for|s:IDE_WipeAllRecursive|.
		Sub-projects are also blocked from the recursion.


Flags are not inherited by Subprojects.

Any text outside a fold is ignored.

------------------------------------------------------------------------------
INHERITANCE	                                          *ide-project-inheritance*

The content of this section is a copy paste of the documentation provided at~
|project-inheritance|

It's best to show inheritance by comparing these two Project Files:
>
	Parent=~/my_project CD=. filter="Make* *.mk" flags=r {
	 Child1=c_code {
	 }
	 Child2=include CD=. filter="*.h" {
	 }
	}

Child1's path is "~/my_project/c_code" because ~/my_project is inherited.  It
also inherits the CD from Parent.  Since Parent has CD=., the Parent's cwd is
"~/my_project".  Child1 therefore inherits a CD of "~/my_project".  Finally,
Child1 inherits the filter from Parent. The flags are not inherited.

Child2 only inherits the "~/my_project" from Parent.

Thus, the example above is exactly equivalent to this:
>
	Parent=~/my_project CD=. filter="Make* *.mk" flags=r {
	 Child1=~/my_project/c_code CD=~/my_project filter="Make* *.mk" {
	 }
	 Child2=~/my_project/include CD=~/my_project/include filter="*.h" {
	 }
	}

(For a real Project, Child1 would not want to inherit its parent's filter, but
this example shows the concept.)  You can always enter \i to display what the
cursor's project inherits.

------------------------------------------------------------------------------
PROJECT EXAMPLE FILE                                      *ide-project-example*

The content of this section is a copy paste from the documentation provided at~
|project-example|

Here is an example ~/.vimprojects file: >

  1	My Project=~/c/project CD=. in=in.vim out=out.vim flags=r {
  2	 Makefile
  3      in.vim
  4      out.vim
  5	 GUI Files=. filter="gui*.c gui*.h" {
  6	  gui_window.c
  7	  gui_dialog.c
  8	  gui_list.c
  9	  gui.h	       # Header file
 10	 }
 11	 Database Files=. filter="data*.c data*.h" {
 12	  data_read.c
 13	  data_write.c
 14	  data.h
 15	 }
 16	 OS-Specific Files {
 17	  Win32=. filter="os_win32*.c os_win32*.h" {
 18	   os_win32_gui.c
 19	   os_win32_io.c
 20	  }
 21	  Unix=. filter="os_unix*.c os_unix*.h" {
 22	   os_unix_gui.c
 23	   os_unix_io.c
 24	  }
 25	 }
 26	}

(Don't type in the line numbers, of course.)

------------------------------------------------------------------------------
TIPS ON USING PROJECT PLUGIN                                *ide-project-tips*

1.  You can create a Project Entry by entering this: >

	Label=~/wherever CD=. filter="*.c *.h" {
	}
<
    Then you can put the cursor in the fold and press \r. The script will fill
    in the files (C files in this case) from this directory for you.  This is
    equivalent to \c without any dialogs.

2.  You can edit the Project File at any time to add, remove, or reorder files
    in the Project list.

3.  Adding files to a Project is very easy.  To add, for example, the 'more.c'
    file to the Project, just insert the filename in the Project Entry then
    hit <Return> on it.

4.  When|quickfix|loads files, it is not equivalent to pressing <Return> on
    a filename, so the directory will not be changed and the scripts will not
    be run. (If I could make this otherwise, I would.)  The solution is to use
    the \L key to load all of the files in the Project before running
    quickfix.

5.  If the Project window gets a bit cluttered with folds partially
    open/closed, you can press|zM|to close everything and tidy it up.

6.  For advanced users, I am exporting the function Project_GetAllFnames()
    which returns all the filenames within a fold and optionally all its
    Subprojects.  Also, I export Project_ForEach() for running a function for
    each filename in the project. See the code for examples on how to use
    these. Finally, I export Project_GetFname(line_number) so that you can
    write your own mappings and get the filename for it.

7.  You can put the . entry in a project, and it will launch the
    |file-explorer| plugin on the directory.  To avoid removal when you
    refresh, make the entry look like this:
>
 	. # pragma keep
<

==============================================================================
IDE DEBUGGING                                                   *ide-debugging*

The ide plugin has a tracing facility to enable back track errors (or bugs) 
within its execution. Although the mechanism is quite primitive - bookeeping
of methods visited - it is quite helpful when trying to discover why an auto
command failed to initialize properly as one can check the order and functions
the ide plugin has been executing.

Level 1 (Panic): Dump all traces, warnings and logs into a debugging file~
This level is best when dealing with multiple running instances of the ide or
with large projects having thuosands of files. In this scenario, errors are
sometime hard to reproduce and therefore having a general trace might help to
recognize the pattern which produces the error within the ide. This level of
debugging is obtained by setting the following variables in the ide script to:
>
  s:IDE_DumpDebugToFile = 1
  s:IDE_DebugFile       = expand("~/ide.debug")
<
Level 2 (Interactive): Show warning messages on the screen for everything~
This level is best when you have an idea of where the problem is (what pattern
of execution brings the error to show) and you have the time and patience to 
go over its messages while executing the program. This level is obtained by
setting the following vriables in the ide script to:
>
  s:IDE_DumpDebugToFile = 0
  s:IDE_isDebugging     = 1
<
Level 3 (Just-in-case): Keep an eye open on what is going on~
Mantain a trace of all the activity either in a file or in a temporary buffer.
The following variables must be set in the ide script: 
>
  s:IDE_DumpDebugToFile = 0
  s:IDE_isDebugging     = 0
  s:IDE_isTracing       = 1
<
Besides this settings within the ide, you must specify when shall the ide
should start recording all the activity and when should it stop. This is 
accomplish through the IDE commands:
>
  :IDELogon <filename>
  :IDELogoff
<
If a filename is specified, all the tracing is recorded into the file, if no
filename is specified a temporary buffer will be used to record the last 
activity within the ide up to 3000 characters. To observe the trace you can
type:
>
  :IDEShowlog
<
Level 4 (Normal): Life as usual, just work~
Let's focus on productivity and keep working, if there is any blatant error 
print it on the screen, but keep working. 
>
  s:IDE_DumpDebugToFile = 0
  s:IDE_isDebugging     = 0
  s:IDE_isTracing       = 0
<
In this level, only relevant information is logged into the file or temporary 
buffer. When you use the ide command to start or stop logging information, no
trace information is recorded.

NOTE: 
It is worth noting that the IDEShowenv command shows the entire ide enviroment,
thus providing a snapshot of the internals of the running conditions of the ide
plugin which is very useful in a debugging session.


==============================================================================
TODO LIST                                                            *ide-todo*

 - Embedd the perl to generate the syntax highlight used by the ide-project 
   into the|ide|plugin.
 - Allow pop/tag to jump to a tab window instead of opening a new window buffer
 - Allow the ide to handle multiple ide-projects at the same time.
   i.e. a divisor at the end of each ide-project can be added to mark its start


==============================================================================
OPEN BUGS                                                             *ide-bug*

 - Default 'taglist' keybinding <F11> resizes the ide window
 - Sometimes the filename (with its complete path), which is used as a key,
   matches the buffer being entered. This is particular to the buffer
   SwapExists

LAST FIXED BUGS~

 - <C-F12> updating ctags within the ide-project prints 'Trailing characters'.
   FIX: ctag +q option was being expanded to quit<CR> due to aucmd
 - SIGN crashes when we toggled off the ide-project and is unlisted.
 - Opening a project-file, exiting the ide and then re-opening the same
   project-file generates an erroneous window split.
 - source explorer <F8> <F8> <F8> <F8> seems to unload the ide-project.
   FIX: The last item in the pluginlist must be the source_explorer itself
 - global search <F5> can also clean the ide-project buffer when jumping to a
   file and the last selected window was the ide-project. It seems that global
   search detects the IDE has its buffer as saved or unchanged, and so loads
   the selected file into the ide window which cleans the the lines on the
   ide buffer. 
   FIX: global search tracks the last buffer enter, so we have to become
   transparent to __ex* buffers on enters.
   DETAILS: This global search behavior is at exWindow.vim:33 at function
   g:ex_RecordCurrentBufNum(), which records the last buffer visited before
   entering the __exWindow. A previous quick fix was to edit the function
   s:exGS_Goto() on file exGlobalSearch.vim:182, by redifining the buffer
   defined by ex_RecordCurrentBufNum()


==============================================================================
THANKS~

"vim: ft=help:norl:ts=8:tw=78
